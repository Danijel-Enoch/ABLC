{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nvar SubjectSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SubjectSubscriber, _super);\n  function SubjectSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n    _this.destination = destination;\n    return _this;\n  }\n  return SubjectSubscriber;\n}(Subscriber);\nexport { SubjectSubscriber };\nvar Subject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(Subject, _super);\n  function Subject() {\n    var _this = _super.call(this) || this;\n    _this.observers = [];\n    _this.closed = false;\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n  Subject.prototype[rxSubscriberSymbol] = function () {\n    return new SubjectSubscriber(this);\n  };\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n  Subject.prototype.next = function (value) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      var observers = this.observers;\n      var len = observers.length;\n      var copy = observers.slice();\n      for (var i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  };\n  Subject.prototype.error = function (err) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n    for (var i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  };\n  Subject.prototype.complete = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n    for (var i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  };\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  };\n  Subject.prototype._trySubscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return _super.prototype._trySubscribe.call(this, subscriber);\n    }\n  };\n  Subject.prototype._subscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  };\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n  return Subject;\n}(Observable);\nexport { Subject };\nvar AnonymousSubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AnonymousSubject, _super);\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n  AnonymousSubject.prototype.next = function (value) {\n    var destination = this.destination;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  };\n  AnonymousSubject.prototype.error = function (err) {\n    var destination = this.destination;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  };\n  AnonymousSubject.prototype.complete = function () {\n    var destination = this.destination;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  };\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var source = this.source;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  };\n  return AnonymousSubject;\n}(Subject);\nexport { AnonymousSubject };","map":{"version":3,"mappings":"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","names":["tslib_1","Observable","Subscriber","Subscription","ObjectUnsubscribedError","SubjectSubscription","SubjectSubscriber","_super","Subject","_this","prototype","lift","AnonymousSubject","subject","observers","len","length","i","copy","hasError","thrownError","err","unsubscribe","isStopped","closed","subscriber","asObservable","observable","destination","value","error","complete","source"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/Subject.ts"],"sourcesContent":["import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}