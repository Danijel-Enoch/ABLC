{"ast":null,"code":"/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n    var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"mappings":"AACA;AACA,SAASA,wBAAoB,oBAAM;AACnC,SAASC,0BAAqB,sBAAM;AACpC,SAASC,2BAAuB,uBAAM;AACtC,SAASC,qBAAmB,iCAAgB;AAC5C,SAASC,WAAW,QAAM,eAAc;AACxC,SAASC,SAAQ,QAAQ,aAAa;AACtC,SAASC,QAAQ,QAAI,YAAe;AACpC,SAASC,YAAUC,eAAI,QAAmB,oBAAM;AAIhD,SAAOC,UAAM,IAAWC,iBAAO,QAA0B;OACvD,IAAMC,WAAU,aAAcC;MAC5B,QAAO,mCAAqC;IAC7C;SACC,eAAO,OAAgB,CAAC;IACzB;SACC,aAAO;IACR;SACC,MAAOA,uBAAoB,gBAAe;IAC3C;SACC;IACA,IAAMC,KAAG,GAAGP,gBAAgB,sBAAK,kBAA+B;WAC5D,+DACE,8DAAmB;IAC1B;EACD","names":["subscribeToArray","subscribeToPromise","subscribeToIterable","subscribeToObservable","isArrayLike","isPromise","isObject","iterator","Symbol_iterator","observable","Symbol_observable","subscribeTo","result","value"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/util/subscribeTo.ts"],"sourcesContent":["import { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>): (subscriber: Subscriber<T>) => Subscription | void => {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}