{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nvar VirtualTimeScheduler = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(VirtualTimeScheduler, _super);\n  function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n    if (SchedulerAction === void 0) {\n      SchedulerAction = VirtualAction;\n    }\n    if (maxFrames === void 0) {\n      maxFrames = Number.POSITIVE_INFINITY;\n    }\n    var _this = _super.call(this, SchedulerAction, function () {\n      return _this.frame;\n    }) || this;\n    _this.maxFrames = maxFrames;\n    _this.frame = 0;\n    _this.index = -1;\n    return _this;\n  }\n  VirtualTimeScheduler.prototype.flush = function () {\n    var _a = this,\n      actions = _a.actions,\n      maxFrames = _a.maxFrames;\n    var error, action;\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  };\n  VirtualTimeScheduler.frameTimeFactor = 10;\n  return VirtualTimeScheduler;\n}(AsyncScheduler);\nexport { VirtualTimeScheduler };\nvar VirtualAction = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(VirtualAction, _super);\n  function VirtualAction(scheduler, work, index) {\n    if (index === void 0) {\n      index = scheduler.index += 1;\n    }\n    var _this = _super.call(this, scheduler, work) || this;\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.index = index;\n    _this.active = true;\n    _this.index = scheduler.index = index;\n    return _this;\n  }\n  VirtualAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (!this.id) {\n      return _super.prototype.schedule.call(this, state, delay);\n    }\n    this.active = false;\n    var action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  };\n  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    this.delay = scheduler.frame + delay;\n    var actions = scheduler.actions;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  };\n  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    return undefined;\n  };\n  VirtualAction.prototype._execute = function (state, delay) {\n    if (this.active === true) {\n      return _super.prototype._execute.call(this, state, delay);\n    }\n  };\n  VirtualAction.sortActions = function (a, b) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n  return VirtualAction;\n}(AsyncAction);\nexport { VirtualAction };","map":{"version":3,"mappings":";AAAA,OAAO,KAAEA,aAAa,OAAM;AAE5B,SAASC,mBAAgB,eAAM;AAG/B;IAA0CC,8CAAcC;EAOtDH,sCAAY,QAA0D,CACnD;WADPE,+CAAsC;IAC/B;MADnBE,eAEE,gBAAM;IADW;IAJZ,aAAK,KAAa;MAClBC,SAAK,GAAaC,MAAC;;IAKzB;MAAA;IAAA;IAOMC;IAECA,cAA2B,CAA1B;IACPA,KAAI,MAAY;IAEhB,OAAOA,KAAC;;sBAEI,CAAGC,SAAO,MAAM;QAE1BC,KAAI,IAAK;MAAAC,OAAS,GAACD,UAAQ;MAAMJ,SAAQ,KAAM,CAACA,SAAQ;aACtD,QAAM;WACP;MACFK;MAEG,KAAKC,KAAE;MACT,SAAO,SAAS,QAAQ,OAAS;QAC/B;;;QAGHC;MACF;QAnCgBC;MAoCnB;MAtC0C,MAAcD,KAsCvD;;EAMD;EAAsCV,yCAAc;EAIlD,2BAAsB;gBAEA;SAFtBA,oBAGE;iBAHoB,gBAAS,UAAsBC;SAC/B,wBAAmD;WACnDW,cAAKC,SAA+B;IAJhD,cAAM,KAAgB,CAAC;MAM/BC,KAAK,GAAKD,SAAG,MAAU,IAAK,CAAG;;IAChC;IAEMR;IAAoBA;IACzBA,KAAK,MAAK,GAAIS;SACZ,OAAO;SACR;IACD,OAAKT,KAAM;;eAMF,UAAQ;IACjB,SAAO,KAAO,QAAQ;MACvBU;IAES;IAA0D;MAC9D,OAAMd,MAAG,UAAU,CAAKe,QAAQ,CAACC;IAC9B;IACP,WAAQ,GAAK,KAAM;IAClB,UAAoC,GAAK,iBAAc,eAAa;IACrE,QAAO,OAAK;IACb;EAES;eAA0D,yBAAiB;IACnF,SAAO,UAAU;MAClBF;IAES;IACR,IAAI,MAAK,YAAW,MAAM;QACxBP,OAAO,oBAAM;WACd;IACFA;IAEa;;eAEL,CAACF,SAAK,CAAKY,cAAS;aACvB,UAAS;WACV;;oBACS;;eACH;YACL,OAAO,KAAG;aACXjB;;;eAED,YAAS;QACVkB;UAAMA;QACL,OAAU;MACX,OACF;QACH,QAAC;MA1DqC,CAAW","names":["tslib_1","AsyncAction","VirtualTimeScheduler","_super","SchedulerAction","maxFrames","Number","_this","prototype","_a","actions","frame","error","action","VirtualAction","scheduler","index","delay","schedule","call","recycleAsyncId","a"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @nodoc\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}