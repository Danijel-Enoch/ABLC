{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Session = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst sha_js_1 = require(\"sha.js\");\nconst util_1 = require(\"../util\");\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\nclass Session {\n  constructor(storage, id, secret, linked) {\n    this._storage = storage;\n    this._id = id || (0, util_1.randomBytesHex)(16);\n    this._secret = secret || (0, util_1.randomBytesHex)(32);\n    this._key = new sha_js_1.sha256().update(`${this._id}, ${this._secret} WalletLink`) // ensure old sessions stay connected\n    .digest(\"hex\");\n    this._linked = !!linked;\n  }\n  static load(storage) {\n    const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n    const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n    const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n    if (id && secret) {\n      return new Session(storage, id, secret, linked === \"1\");\n    }\n    return null;\n  }\n  static get persistedSessionIdChange$() {\n    return (0, rxjs_1.fromEvent)(window, \"storage\").pipe((0, operators_1.filter)(evt => evt.key === STORAGE_KEY_SESSION_ID), (0, operators_1.map)(evt => ({\n      oldValue: evt.oldValue || null,\n      newValue: evt.newValue || null\n    })));\n  }\n  /**\n   * Takes in a session ID and returns the sha256 hash of it.\n   * @param sessionId session ID\n   */\n  static hash(sessionId) {\n    return new sha_js_1.sha256().update(sessionId).digest(\"hex\");\n  }\n  get id() {\n    return this._id;\n  }\n  get secret() {\n    return this._secret;\n  }\n  get key() {\n    return this._key;\n  }\n  get linked() {\n    return this._linked;\n  }\n  set linked(val) {\n    this._linked = val;\n    this.persistLinked();\n  }\n  save() {\n    this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n    this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n    this.persistLinked();\n    return this;\n  }\n  persistLinked() {\n    this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n  }\n}\nexports.Session = Session;","map":{"version":3,"names":["Object","defineProperty","exports","value","Session","rxjs_1","require","operators_1","sha_js_1","util_1","STORAGE_KEY_SESSION_ID","STORAGE_KEY_SESSION_SECRET","STORAGE_KEY_SESSION_LINKED","constructor","storage","id","secret","linked","_storage","_id","randomBytesHex","_secret","_key","sha256","update","digest","_linked","load","getItem","persistedSessionIdChange$","fromEvent","window","pipe","filter","evt","key","map","oldValue","newValue","hash","sessionId","val","persistLinked","save","setItem"],"sources":["/Users/air/Downloads/ABLC/node_modules/@coinbase/wallet-sdk/dist/relay/Session.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Session = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst sha_js_1 = require(\"sha.js\");\nconst util_1 = require(\"../util\");\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\nclass Session {\n    constructor(storage, id, secret, linked) {\n        this._storage = storage;\n        this._id = id || (0, util_1.randomBytesHex)(16);\n        this._secret = secret || (0, util_1.randomBytesHex)(32);\n        this._key = new sha_js_1.sha256()\n            .update(`${this._id}, ${this._secret} WalletLink`) // ensure old sessions stay connected\n            .digest(\"hex\");\n        this._linked = !!linked;\n    }\n    static load(storage) {\n        const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n        const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n        const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n        if (id && secret) {\n            return new Session(storage, id, secret, linked === \"1\");\n        }\n        return null;\n    }\n    static get persistedSessionIdChange$() {\n        return (0, rxjs_1.fromEvent)(window, \"storage\").pipe((0, operators_1.filter)(evt => evt.key === STORAGE_KEY_SESSION_ID), (0, operators_1.map)(evt => ({\n            oldValue: evt.oldValue || null,\n            newValue: evt.newValue || null,\n        })));\n    }\n    /**\n     * Takes in a session ID and returns the sha256 hash of it.\n     * @param sessionId session ID\n     */\n    static hash(sessionId) {\n        return new sha_js_1.sha256().update(sessionId).digest(\"hex\");\n    }\n    get id() {\n        return this._id;\n    }\n    get secret() {\n        return this._secret;\n    }\n    get key() {\n        return this._key;\n    }\n    get linked() {\n        return this._linked;\n    }\n    set linked(val) {\n        this._linked = val;\n        this.persistLinked();\n    }\n    save() {\n        this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n        this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n        this.persistLinked();\n        return this;\n    }\n    persistLinked() {\n        this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n    }\n}\nexports.Session = Session;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMC,WAAW,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC7C,MAAME,QAAQ,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMG,MAAM,GAAGH,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMI,sBAAsB,GAAG,YAAY;AAC3C,MAAMC,0BAA0B,GAAG,gBAAgB;AACnD,MAAMC,0BAA0B,GAAG,gBAAgB;AACnD,MAAMR,OAAO,CAAC;EACVS,WAAW,CAACC,OAAO,EAAEC,EAAE,EAAEC,MAAM,EAAEC,MAAM,EAAE;IACrC,IAAI,CAACC,QAAQ,GAAGJ,OAAO;IACvB,IAAI,CAACK,GAAG,GAAGJ,EAAE,IAAI,CAAC,CAAC,EAAEN,MAAM,CAACW,cAAc,EAAE,EAAE,CAAC;IAC/C,IAAI,CAACC,OAAO,GAAGL,MAAM,IAAI,CAAC,CAAC,EAAEP,MAAM,CAACW,cAAc,EAAE,EAAE,CAAC;IACvD,IAAI,CAACE,IAAI,GAAG,IAAId,QAAQ,CAACe,MAAM,EAAE,CAC5BC,MAAM,CAAE,GAAE,IAAI,CAACL,GAAI,KAAI,IAAI,CAACE,OAAQ,aAAY,CAAC,CAAC;IAAA,CAClDI,MAAM,CAAC,KAAK,CAAC;IAClB,IAAI,CAACC,OAAO,GAAG,CAAC,CAACT,MAAM;EAC3B;EACA,OAAOU,IAAI,CAACb,OAAO,EAAE;IACjB,MAAMC,EAAE,GAAGD,OAAO,CAACc,OAAO,CAAClB,sBAAsB,CAAC;IAClD,MAAMO,MAAM,GAAGH,OAAO,CAACc,OAAO,CAAChB,0BAA0B,CAAC;IAC1D,MAAMI,MAAM,GAAGF,OAAO,CAACc,OAAO,CAACjB,0BAA0B,CAAC;IAC1D,IAAII,EAAE,IAAIC,MAAM,EAAE;MACd,OAAO,IAAIZ,OAAO,CAACU,OAAO,EAAEC,EAAE,EAAEC,MAAM,EAAEC,MAAM,KAAK,GAAG,CAAC;IAC3D;IACA,OAAO,IAAI;EACf;EACA,WAAWY,yBAAyB,GAAG;IACnC,OAAO,CAAC,CAAC,EAAExB,MAAM,CAACyB,SAAS,EAAEC,MAAM,EAAE,SAAS,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEzB,WAAW,CAAC0B,MAAM,EAAEC,GAAG,IAAIA,GAAG,CAACC,GAAG,KAAKzB,sBAAsB,CAAC,EAAE,CAAC,CAAC,EAAEH,WAAW,CAAC6B,GAAG,EAAEF,GAAG,KAAK;MAClJG,QAAQ,EAAEH,GAAG,CAACG,QAAQ,IAAI,IAAI;MAC9BC,QAAQ,EAAEJ,GAAG,CAACI,QAAQ,IAAI;IAC9B,CAAC,CAAC,CAAC,CAAC;EACR;EACA;AACJ;AACA;AACA;EACI,OAAOC,IAAI,CAACC,SAAS,EAAE;IACnB,OAAO,IAAIhC,QAAQ,CAACe,MAAM,EAAE,CAACC,MAAM,CAACgB,SAAS,CAAC,CAACf,MAAM,CAAC,KAAK,CAAC;EAChE;EACA,IAAIV,EAAE,GAAG;IACL,OAAO,IAAI,CAACI,GAAG;EACnB;EACA,IAAIH,MAAM,GAAG;IACT,OAAO,IAAI,CAACK,OAAO;EACvB;EACA,IAAIc,GAAG,GAAG;IACN,OAAO,IAAI,CAACb,IAAI;EACpB;EACA,IAAIL,MAAM,GAAG;IACT,OAAO,IAAI,CAACS,OAAO;EACvB;EACA,IAAIT,MAAM,CAACwB,GAAG,EAAE;IACZ,IAAI,CAACf,OAAO,GAAGe,GAAG;IAClB,IAAI,CAACC,aAAa,EAAE;EACxB;EACAC,IAAI,GAAG;IACH,IAAI,CAACzB,QAAQ,CAAC0B,OAAO,CAAClC,sBAAsB,EAAE,IAAI,CAACS,GAAG,CAAC;IACvD,IAAI,CAACD,QAAQ,CAAC0B,OAAO,CAACjC,0BAA0B,EAAE,IAAI,CAACU,OAAO,CAAC;IAC/D,IAAI,CAACqB,aAAa,EAAE;IACpB,OAAO,IAAI;EACf;EACAA,aAAa,GAAG;IACZ,IAAI,CAACxB,QAAQ,CAAC0B,OAAO,CAAChC,0BAA0B,EAAE,IAAI,CAACc,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC;EAC/E;AACJ;AACAxB,OAAO,CAACE,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}