{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletProvider = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst DiagnosticLogger_1 = require(\"../connection/DiagnosticLogger\");\nconst Session_1 = require(\"../relay/Session\");\nconst WalletSDKRelayAbstract_1 = require(\"../relay/WalletSDKRelayAbstract\");\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\nconst DEFAULT_JSON_RPC_URL = \"DefaultJsonRpcUrl\";\nclass CoinbaseWalletProvider extends safe_event_emitter_1.default {\n  constructor(options) {\n    var _a, _b;\n    super();\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._relay = null;\n    this._addresses = [];\n    this.hasMadeFirstChainChangedEmission = false;\n    this._send = this.send.bind(this);\n    this._sendAsync = this.sendAsync.bind(this);\n    this.setProviderInfo = this.setProviderInfo.bind(this);\n    this.updateProviderInfo = this.updateProviderInfo.bind(this);\n    this.getChainId = this.getChainId.bind(this);\n    this.setAppInfo = this.setAppInfo.bind(this);\n    this.enable = this.enable.bind(this);\n    this.close = this.close.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.request = this.request.bind(this);\n    this._setAddresses = this._setAddresses.bind(this);\n    this.scanQRCode = this.scanQRCode.bind(this);\n    this.genericRequest = this.genericRequest.bind(this);\n    this._chainIdFromOpts = options.chainId;\n    this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n    this._overrideIsMetaMask = options.overrideIsMetaMask;\n    this._relayProvider = options.relayProvider;\n    this._storage = options.storage;\n    this._relayEventManager = options.relayEventManager;\n    this.diagnostic = options.diagnosticLogger;\n    this.reloadOnDisconnect = true;\n    this.isCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this.isCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n    this.qrUrl = options.qrUrl;\n    this.supportsAddressSwitching = options.supportsAddressSwitching;\n    this.isLedger = options.isLedger;\n    const chainId = this.getChainId();\n    const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16));\n    // indicate that we've connected, for EIP-1193 compliance\n    this.emit(\"connect\", {\n      chainIdStr\n    });\n    const cachedAddresses = this._storage.getItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n    if (cachedAddresses) {\n      const addresses = cachedAddresses.split(\" \");\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n        this.emit(\"accountsChanged\", addresses);\n      }\n    }\n    this._subscriptionManager.events.on(\"notification\", notification => {\n      this.emit(\"message\", {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n    if (this._addresses.length > 0) {\n      void this.initializeRelay();\n    }\n    window.addEventListener(\"message\", event => {\n      var _a;\n      // Used to verify the source and window are correct before proceeding\n      if (event.origin !== location.origin || event.source !== window) {\n        return;\n      }\n      if (event.data.type !== \"walletLinkMessage\") return; // compatibility with CBW extension\n      if (event.data.data.action === \"defaultChainChanged\" || event.data.data.action === \"dappChainSwitched\") {\n        const _chainId = event.data.data.chainId;\n        const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n        this.updateProviderInfo(jsonRpcUrl, Number(_chainId));\n      }\n      if (event.data.data.action === \"addressChanged\") {\n        this._setAddresses([event.data.data.address]);\n      }\n    });\n  }\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n  get networkVersion() {\n    return this.getChainId().toString(10);\n  }\n  get chainId() {\n    return (0, util_1.prepend0x)(this.getChainId().toString(16));\n  }\n  get isWalletLink() {\n    // backward compatibility\n    return true;\n  }\n  /**\n   * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n   * true for this method.\n   */\n  get isMetaMask() {\n    return this._overrideIsMetaMask;\n  }\n  get host() {\n    return this.jsonRpcUrl;\n  }\n  get connected() {\n    return true;\n  }\n  isConnected() {\n    return true;\n  }\n  get jsonRpcUrl() {\n    var _a;\n    return (_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts;\n  }\n  set jsonRpcUrl(value) {\n    this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n  }\n  disableReloadOnDisconnect() {\n    this.reloadOnDisconnect = false;\n  }\n  /**\n   * this function is called when coinbase provider is being injected to a dapp\n   * standalone + walletlinked extension, ledger, in-app browser using cipher-web-view\n   */\n  setProviderInfo(jsonRpcUrl, chainId) {\n    // extension tend to use the chianId from the dapp, while in-app browser and ledger overrides the default network\n    if (!(this.isLedger || this.isCoinbaseBrowser)) {\n      this._chainIdFromOpts = chainId;\n      this._jsonRpcUrlFromOpts = jsonRpcUrl;\n    }\n    this.updateProviderInfo(this.jsonRpcUrl, this.getChainId());\n  }\n  updateProviderInfo(jsonRpcUrl, chainId) {\n    this.jsonRpcUrl = jsonRpcUrl;\n    // emit chainChanged event if necessary\n    const originalChainId = this.getChainId();\n    this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n    const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n    if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n      this.emit(\"chainChanged\", this.getChainId());\n      this.hasMadeFirstChainChangedEmission = true;\n    }\n  }\n  async watchAsset(type, address, symbol, decimals, image, chainId) {\n    const relay = await this.initializeRelay();\n    const result = await relay.watchAsset(type, address, symbol, decimals, image, chainId === null || chainId === void 0 ? void 0 : chainId.toString()).promise;\n    return !!result.result;\n  }\n  async addEthereumChain(chainId, rpcUrls, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {\n    var _a, _b;\n    if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n      return false;\n    }\n    const relay = await this.initializeRelay();\n    const isWhitelistedNetworkOrStandalone = relay.inlineAddEthereumChain(chainId.toString());\n    if (!this._isAuthorized() && !isWhitelistedNetworkOrStandalone) {\n      await relay.requestEthereumAccounts().promise;\n    }\n    const res = await relay.addEthereumChain(chainId.toString(), rpcUrls, iconUrls, blockExplorerUrls, chainName, nativeCurrency).promise;\n    if (((_a = res.result) === null || _a === void 0 ? void 0 : _a.isApproved) === true) {\n      this.updateProviderInfo(rpcUrls[0], chainId);\n    }\n    return ((_b = res.result) === null || _b === void 0 ? void 0 : _b.isApproved) === true;\n  }\n  async switchEthereumChain(chainId) {\n    const relay = await this.initializeRelay();\n    const res = await relay.switchEthereumChain(chainId.toString(10), this.selectedAddress || undefined).promise;\n    if (res.errorCode) {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: res.errorCode\n      });\n    }\n    const switchResponse = res.result;\n    if (switchResponse.isApproved && switchResponse.rpcUrl.length > 0) {\n      this.updateProviderInfo(switchResponse.rpcUrl, chainId);\n    }\n  }\n  setAppInfo(appName, appLogoUrl) {\n    void this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n  }\n  async enable() {\n    var _a;\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: \"provider::enable\",\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n    if (this._addresses.length > 0) {\n      return [...this._addresses];\n    }\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n  async close() {\n    const relay = await this.initializeRelay();\n    relay.resetAndReload();\n  }\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    }\n    // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    }\n    // send(JSONRPCRequest[]): JSONRPCResponse[]\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    }\n    // send(JSONRPCRequest): JSONRPCResponse\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n  async sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    }\n    // send(JSONRPCRequest[], callback): void\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n      return;\n    }\n    // send(JSONRPCRequest, callback): void\n    const cb = callback;\n    return this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"Expected a single, non-array, object argument.\",\n        data: args\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.method' must be a non-empty string.\",\n        data: args\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.params' must be an object or array if provided.\",\n        data: args\n      });\n    }\n    const newParams = params === undefined ? [] : params;\n    // Coinbase Wallet Requests\n    const id = this._relayEventManager.makeRequestId();\n    const result = await this._sendRequestAsync({\n      method,\n      params: newParams,\n      jsonrpc: \"2.0\",\n      id\n    });\n    return result.result;\n  }\n  async scanQRCode(match) {\n    const relay = await this.initializeRelay();\n    const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n    return res.result;\n  }\n  async genericRequest(data, action) {\n    const relay = await this.initializeRelay();\n    const res = await relay.genericRequest(data, action).promise;\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n    return res.result;\n  }\n  async selectProvider(providerOptions) {\n    const relay = await this.initializeRelay();\n    const res = await relay.selectProvider(providerOptions).promise;\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n    return res.result;\n  }\n  supportsSubscriptions() {\n    return false;\n  }\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n  disconnect() {\n    return true;\n  }\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n    if (response.result === undefined) {\n      throw new Error(`Coinbase Wallet does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n    return response;\n  }\n  _setAddresses(addresses, isDisconnect) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n    const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n    if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n      return;\n    }\n    if (this._addresses.length > 0 && this.supportsAddressSwitching === false && !isDisconnect) {\n      /**\n       * The extension currently doesn't support switching selected wallet index\n       * make sure walletlink doesn't update it's address in this case\n       */\n      return;\n    }\n    this._addresses = newAddresses;\n    this.emit(\"accountsChanged\", this._addresses);\n    this._storage.setItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(\" \"));\n  }\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n      this._handleAsynchronousMethods(request).then(res => res && resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n      case JSONRPC_1.JSONRPCMethod.eth_chainId:\n        return this._eth_chainId();\n      default:\n        return undefined;\n    }\n  }\n  async _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n      case JSONRPC_1.JSONRPCMethod.cbWallet_arbitrary:\n        return this._cbwallet_arbitrary(params);\n      case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n        return this._wallet_addEthereumChain(params);\n      case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n        return this._wallet_switchEthereumChain(params);\n      case JSONRPC_1.JSONRPCMethod.wallet_watchAsset:\n        return this._wallet_watchAsset(params);\n    }\n    const relay = await this.initializeRelay();\n    return relay.makeEthereumJSONRPCRequest(request, this.jsonRpcUrl);\n  }\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n    return undefined;\n  }\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n      case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n        return this._subscriptionManager.handleRequest(request);\n    }\n    return undefined;\n  }\n  _isKnownAddress(addressString) {\n    try {\n      const addressStr = (0, util_1.ensureAddressString)(addressString);\n      const lowercaseAddresses = this._addresses.map(address => (0, util_1.ensureAddressString)(address));\n      return lowercaseAddresses.includes(addressStr);\n    } catch (_a) {}\n    return false;\n  }\n  _ensureKnownAddress(addressString) {\n    var _a;\n    if (!this._isKnownAddress(addressString)) {\n      (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.UNKNOWN_ADDRESS_ENCOUNTERED);\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? (0, util_1.ensureAddressString)(tx.from) : this.selectedAddress;\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n    this._ensureKnownAddress(fromAddress);\n    const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n    const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n    const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n    const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas) : null;\n    const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n    const chainId = this.getChainId();\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasLimit,\n      chainId\n    };\n  }\n  _isAuthorized() {\n    return this._addresses.length > 0;\n  }\n  _requireAuthorization() {\n    if (!this._isAuthorized()) {\n      throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n    }\n  }\n  _throwUnsupportedMethodError() {\n    throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n  }\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n      }\n      throw err;\n    }\n  }\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const relay = await this.initializeRelay();\n    const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n  _eth_accounts() {\n    return [...this._addresses];\n  }\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n  _net_version() {\n    return this.getChainId().toString(10);\n  }\n  _eth_chainId() {\n    return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n  }\n  getChainId() {\n    const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY);\n    if (!chainIdStr) {\n      return (0, util_1.ensureIntNumber)(this._chainIdFromOpts);\n    }\n    const chainId = parseInt(chainIdStr, 10);\n    return (0, util_1.ensureIntNumber)(chainId);\n  }\n  async _eth_requestAccounts() {\n    var _a;\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: \"provider::_eth_requestAccounts\",\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n    let res;\n    try {\n      const relay = await this.initializeRelay();\n      res = await relay.requestEthereumAccounts().promise;\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n      }\n      throw err;\n    }\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n    this._setAddresses(res.result);\n    if (!(this.isLedger || this.isCoinbaseBrowser)) {\n      await this.switchEthereumChain(this.getChainId());\n    }\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n  _eth_sign(params) {\n    this._requireAuthorization();\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const message = (0, util_1.ensureBuffer)(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n  _eth_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n  _personal_sign(params) {\n    this._requireAuthorization();\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n  _personal_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n    const tx = this._prepareTransactionParams(params[0] || {});\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumTransaction(tx).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n      throw err;\n    }\n  }\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n    const relay = await this.initializeRelay();\n    const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n    const tx = this._prepareTransactionParams(params[0] || {});\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n      throw err;\n    }\n  }\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  /** @deprecated */\n  async _cbwallet_arbitrary(params) {\n    const action = params[0];\n    const data = params[1];\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n    if (typeof action !== \"object\" || action === null) {\n      throw new Error(\"parameter must be an object\");\n    }\n    const result = await this.genericRequest(action, data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n  async _wallet_addEthereumChain(params) {\n    var _a, _b, _c, _d;\n    const request = params[0];\n    if (((_a = request.rpcUrls) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        error: {\n          code: 2,\n          message: `please pass in at least 1 rpcUrl`\n        }\n      };\n    }\n    if (!request.chainName || request.chainName.trim() === \"\") {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: 0,\n        message: \"chainName is a required field\"\n      });\n    }\n    if (!request.nativeCurrency) {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: 0,\n        message: \"nativeCurrency is a required field\"\n      });\n    }\n    const chainIdNumber = parseInt(request.chainId, 16);\n    const success = await this.addEthereumChain(chainIdNumber, (_b = request.rpcUrls) !== null && _b !== void 0 ? _b : [], (_c = request.blockExplorerUrls) !== null && _c !== void 0 ? _c : [], request.chainName, (_d = request.iconUrls) !== null && _d !== void 0 ? _d : [], request.nativeCurrency);\n    if (success) {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: null\n      };\n    } else {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        error: {\n          code: 2,\n          message: `unable to add ethereum chain`\n        }\n      };\n    }\n  }\n  async _wallet_switchEthereumChain(params) {\n    const request = params[0];\n    await this.switchEthereumChain(parseInt(request.chainId, 16));\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: null\n    };\n  }\n  async _wallet_watchAsset(params) {\n    const request = Array.isArray(params) ? params[0] : params;\n    if (!request.type) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Type is required\"\n      });\n    }\n    if ((request === null || request === void 0 ? void 0 : request.type) !== \"ERC20\") {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: `Asset of type '${request.type}' is not supported`\n      });\n    }\n    if (!(request === null || request === void 0 ? void 0 : request.options)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Options are required\"\n      });\n    }\n    if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Address is required\"\n      });\n    }\n    const chainId = this.getChainId();\n    const {\n      address,\n      symbol,\n      image,\n      decimals\n    } = request.options;\n    const res = await this.watchAsset(request.type, address, symbol, decimals, image, chainId);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res\n    };\n  }\n  _eth_uninstallFilter(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  _eth_getFilterChanges(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n  _eth_getFilterLogs(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n  initializeRelay() {\n    if (this._relay) {\n      return Promise.resolve(this._relay);\n    }\n    return this._relayProvider().then(relay => {\n      relay.setAccountsCallback((accounts, isDisconnect) => this._setAddresses(accounts, isDisconnect));\n      relay.setChainCallback((chainId, jsonRpcUrl) => {\n        this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10));\n      });\n      relay.setDappDefaultChainCallback(this._chainIdFromOpts);\n      this._relay = relay;\n      return relay;\n    });\n  }\n}\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","CoinbaseWalletProvider","safe_event_emitter_1","require","bn_js_1","eth_rpc_errors_1","DiagnosticLogger_1","Session_1","WalletSDKRelayAbstract_1","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","SubscriptionManager_1","DEFAULT_CHAIN_ID_KEY","DEFAULT_JSON_RPC_URL","default","constructor","options","_a","_b","_filterPolyfill","FilterPolyfill","_subscriptionManager","SubscriptionManager","_relay","_addresses","hasMadeFirstChainChangedEmission","_send","send","bind","_sendAsync","sendAsync","setProviderInfo","updateProviderInfo","getChainId","setAppInfo","enable","close","request","_setAddresses","scanQRCode","genericRequest","_chainIdFromOpts","chainId","_jsonRpcUrlFromOpts","jsonRpcUrl","_overrideIsMetaMask","overrideIsMetaMask","_relayProvider","relayProvider","_storage","storage","_relayEventManager","relayEventManager","diagnostic","diagnosticLogger","reloadOnDisconnect","isCoinbaseWallet","overrideIsCoinbaseWallet","isCoinbaseBrowser","overrideIsCoinbaseBrowser","qrUrl","supportsAddressSwitching","isLedger","chainIdStr","prepend0x","toString","emit","cachedAddresses","getItem","LOCAL_STORAGE_ADDRESSES_KEY","addresses","split","map","address","ensureAddressString","events","on","notification","type","method","data","params","length","initializeRelay","window","addEventListener","event","origin","location","source","action","_chainId","Number","selectedAddress","undefined","networkVersion","isWalletLink","isMetaMask","host","connected","isConnected","setItem","disableReloadOnDisconnect","originalChainId","chainChanged","ensureIntNumber","watchAsset","symbol","decimals","image","relay","result","promise","addEthereumChain","rpcUrls","blockExplorerUrls","chainName","iconUrls","nativeCurrency","isWhitelistedNetworkOrStandalone","inlineAddEthereumChain","_isAuthorized","requestEthereumAccounts","res","isApproved","switchEthereumChain","errorCode","ethErrors","provider","custom","code","switchResponse","rpcUrl","appName","appLogoUrl","then","log","EVENTS","ETH_ACCOUNTS_STATE","addresses_length","sessionIdHash","Session","hash","session","id","JSONRPCMethod","eth_requestAccounts","resetAndReload","requestOrMethod","callbackOrParams","Array","isArray","jsonrpc","_sendRequestAsync","callback","requests","r","_sendRequest","req","Error","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","args","rpc","invalidRequest","message","newParams","makeRequestId","match","ensureRegExpString","selectProvider","providerOptions","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","isDisconnect","newAddresses","JSON","stringify","join","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","eth_chainId","_eth_chainId","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","cbWallet_arbitrary","_cbwallet_arbitrary","wallet_addEthereumChain","_wallet_addEthereumChain","wallet_switchEthereumChain","_wallet_switchEthereumChain","wallet_watchAsset","_wallet_watchAsset","makeEthereumJSONRPCRequest","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","eth_subscribe","eth_unsubscribe","handleRequest","_isKnownAddress","addressString","addressStr","lowercaseAddresses","includes","_ensureKnownAddress","UNKNOWN_ADDRESS_ENCOUNTERED","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gasLimit","gas","_requireAuthorization","unauthorized","unsupportedMethod","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","userRejectedRequest","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","hexStringFromIntNumber","parseInt","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","ensureParsedJSONObject","hashForSignTypedDataLegacy","typedDataJSON","hashForSignTypedData_v3","hashForSignTypedData_v4","_c","_d","error","trim","chainIdNumber","success","invalidParams","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs","setAccountsCallback","accounts","setChainCallback","setDappDefaultChainCallback"],"sources":["/Users/air/Downloads/ABLC/node_modules/@coinbase/wallet-sdk/dist/provider/CoinbaseWalletProvider.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletProvider = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst DiagnosticLogger_1 = require(\"../connection/DiagnosticLogger\");\nconst Session_1 = require(\"../relay/Session\");\nconst WalletSDKRelayAbstract_1 = require(\"../relay/WalletSDKRelayAbstract\");\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\nconst DEFAULT_JSON_RPC_URL = \"DefaultJsonRpcUrl\";\nclass CoinbaseWalletProvider extends safe_event_emitter_1.default {\n    constructor(options) {\n        var _a, _b;\n        super();\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._relay = null;\n        this._addresses = [];\n        this.hasMadeFirstChainChangedEmission = false;\n        this._send = this.send.bind(this);\n        this._sendAsync = this.sendAsync.bind(this);\n        this.setProviderInfo = this.setProviderInfo.bind(this);\n        this.updateProviderInfo = this.updateProviderInfo.bind(this);\n        this.getChainId = this.getChainId.bind(this);\n        this.setAppInfo = this.setAppInfo.bind(this);\n        this.enable = this.enable.bind(this);\n        this.close = this.close.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.request = this.request.bind(this);\n        this._setAddresses = this._setAddresses.bind(this);\n        this.scanQRCode = this.scanQRCode.bind(this);\n        this.genericRequest = this.genericRequest.bind(this);\n        this._chainIdFromOpts = options.chainId;\n        this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n        this._overrideIsMetaMask = options.overrideIsMetaMask;\n        this._relayProvider = options.relayProvider;\n        this._storage = options.storage;\n        this._relayEventManager = options.relayEventManager;\n        this.diagnostic = options.diagnosticLogger;\n        this.reloadOnDisconnect = true;\n        this.isCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n        this.isCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n        this.qrUrl = options.qrUrl;\n        this.supportsAddressSwitching = options.supportsAddressSwitching;\n        this.isLedger = options.isLedger;\n        const chainId = this.getChainId();\n        const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16));\n        // indicate that we've connected, for EIP-1193 compliance\n        this.emit(\"connect\", { chainIdStr });\n        const cachedAddresses = this._storage.getItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cachedAddresses) {\n            const addresses = cachedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n                this.emit(\"accountsChanged\", addresses);\n            }\n        }\n        this._subscriptionManager.events.on(\"notification\", (notification) => {\n            this.emit(\"message\", {\n                type: notification.method,\n                data: notification.params,\n            });\n        });\n        if (this._addresses.length > 0) {\n            void this.initializeRelay();\n        }\n        window.addEventListener(\"message\", event => {\n            var _a;\n            // Used to verify the source and window are correct before proceeding\n            if (event.origin !== location.origin || event.source !== window) {\n                return;\n            }\n            if (event.data.type !== \"walletLinkMessage\")\n                return; // compatibility with CBW extension\n            if (event.data.data.action === \"defaultChainChanged\" ||\n                event.data.data.action === \"dappChainSwitched\") {\n                const _chainId = event.data.data.chainId;\n                const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n                this.updateProviderInfo(jsonRpcUrl, Number(_chainId));\n            }\n            if (event.data.data.action === \"addressChanged\") {\n                this._setAddresses([event.data.data.address]);\n            }\n        });\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this.getChainId().toString(10);\n    }\n    get chainId() {\n        return (0, util_1.prepend0x)(this.getChainId().toString(16));\n    }\n    get isWalletLink() {\n        // backward compatibility\n        return true;\n    }\n    /**\n     * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n     * true for this method.\n     */\n    get isMetaMask() {\n        return this._overrideIsMetaMask;\n    }\n    get host() {\n        return this.jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    get jsonRpcUrl() {\n        var _a;\n        return ((_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts);\n    }\n    set jsonRpcUrl(value) {\n        this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n    }\n    disableReloadOnDisconnect() {\n        this.reloadOnDisconnect = false;\n    }\n    /**\n     * this function is called when coinbase provider is being injected to a dapp\n     * standalone + walletlinked extension, ledger, in-app browser using cipher-web-view\n     */\n    setProviderInfo(jsonRpcUrl, chainId) {\n        // extension tend to use the chianId from the dapp, while in-app browser and ledger overrides the default network\n        if (!(this.isLedger || this.isCoinbaseBrowser)) {\n            this._chainIdFromOpts = chainId;\n            this._jsonRpcUrlFromOpts = jsonRpcUrl;\n        }\n        this.updateProviderInfo(this.jsonRpcUrl, this.getChainId());\n    }\n    updateProviderInfo(jsonRpcUrl, chainId) {\n        this.jsonRpcUrl = jsonRpcUrl;\n        // emit chainChanged event if necessary\n        const originalChainId = this.getChainId();\n        this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n        const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n        if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n            this.emit(\"chainChanged\", this.getChainId());\n            this.hasMadeFirstChainChangedEmission = true;\n        }\n    }\n    async watchAsset(type, address, symbol, decimals, image, chainId) {\n        const relay = await this.initializeRelay();\n        const result = await relay.watchAsset(type, address, symbol, decimals, image, chainId === null || chainId === void 0 ? void 0 : chainId.toString()).promise;\n        return !!result.result;\n    }\n    async addEthereumChain(chainId, rpcUrls, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {\n        var _a, _b;\n        if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n            return false;\n        }\n        const relay = await this.initializeRelay();\n        const isWhitelistedNetworkOrStandalone = relay.inlineAddEthereumChain(chainId.toString());\n        if (!this._isAuthorized() && !isWhitelistedNetworkOrStandalone) {\n            await relay.requestEthereumAccounts().promise;\n        }\n        const res = await relay.addEthereumChain(chainId.toString(), rpcUrls, iconUrls, blockExplorerUrls, chainName, nativeCurrency).promise;\n        if (((_a = res.result) === null || _a === void 0 ? void 0 : _a.isApproved) === true) {\n            this.updateProviderInfo(rpcUrls[0], chainId);\n        }\n        return ((_b = res.result) === null || _b === void 0 ? void 0 : _b.isApproved) === true;\n    }\n    async switchEthereumChain(chainId) {\n        const relay = await this.initializeRelay();\n        const res = await relay.switchEthereumChain(chainId.toString(10), this.selectedAddress || undefined).promise;\n        if (res.errorCode) {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: res.errorCode,\n            });\n        }\n        const switchResponse = res.result;\n        if (switchResponse.isApproved && switchResponse.rpcUrl.length > 0) {\n            this.updateProviderInfo(switchResponse.rpcUrl, chainId);\n        }\n    }\n    setAppInfo(appName, appLogoUrl) {\n        void this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n    }\n    async enable() {\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: \"provider::enable\",\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay\n                ? Session_1.Session.hash(this._relay.session.id)\n                : undefined,\n        });\n        if (this._addresses.length > 0) {\n            return [...this._addresses];\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    async close() {\n        const relay = await this.initializeRelay();\n        relay.resetAndReload();\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params,\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    async sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        return this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"Expected a single, non-array, object argument.\",\n                data: args,\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.method' must be a non-empty string.\",\n                data: args,\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.params' must be an object or array if provided.\",\n                data: args,\n            });\n        }\n        const newParams = params === undefined ? [] : params;\n        // Coinbase Wallet Requests\n        const id = this._relayEventManager.makeRequestId();\n        const result = await this._sendRequestAsync({\n            method,\n            params: newParams,\n            jsonrpc: \"2.0\",\n            id,\n        });\n        return result.result;\n    }\n    async scanQRCode(match) {\n        const relay = await this.initializeRelay();\n        const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async genericRequest(data, action) {\n        const relay = await this.initializeRelay();\n        const res = await relay.genericRequest(data, action).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async selectProvider(providerOptions) {\n        const relay = await this.initializeRelay();\n        const res = await relay.selectProvider(providerOptions).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id,\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`Coinbase Wallet does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses, isDisconnect) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n        if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n            return;\n        }\n        if (this._addresses.length > 0 &&\n            this.supportsAddressSwitching === false &&\n            !isDisconnect) {\n            /**\n             * The extension currently doesn't support switching selected wallet index\n             * make sure walletlink doesn't update it's address in this case\n             */\n            return;\n        }\n        this._addresses = newAddresses;\n        this.emit(\"accountsChanged\", this._addresses);\n        this._storage.setItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(\" \"));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult,\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then(res => resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: res.result,\n                    }))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => res && resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            case JSONRPC_1.JSONRPCMethod.eth_chainId:\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    async _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.cbWallet_arbitrary:\n                return this._cbwallet_arbitrary(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n                return this._wallet_addEthereumChain(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n                return this._wallet_switchEthereumChain(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_watchAsset:\n                return this._wallet_watchAsset(params);\n        }\n        const relay = await this.initializeRelay();\n        return relay.makeEthereumJSONRPCRequest(request, this.jsonRpcUrl);\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n            case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const addressStr = (0, util_1.ensureAddressString)(addressString);\n            const lowercaseAddresses = this._addresses.map(address => (0, util_1.ensureAddressString)(address));\n            return lowercaseAddresses.includes(addressStr);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        var _a;\n        if (!this._isKnownAddress(addressString)) {\n            (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.UNKNOWN_ADDRESS_ENCOUNTERED);\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? (0, util_1.ensureAddressString)(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n        const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n        const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n        const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null\n            ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas)\n            : null;\n        const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n        const chainId = this.getChainId();\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            gasLimit,\n            chainId,\n        };\n    }\n    _isAuthorized() {\n        return this._addresses.length > 0;\n    }\n    _requireAuthorization() {\n        if (!this._isAuthorized()) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const relay = await this.initializeRelay();\n        const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return [...this._addresses];\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this.getChainId().toString(10);\n    }\n    _eth_chainId() {\n        return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n    }\n    getChainId() {\n        const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY);\n        if (!chainIdStr) {\n            return (0, util_1.ensureIntNumber)(this._chainIdFromOpts);\n        }\n        const chainId = parseInt(chainIdStr, 10);\n        return (0, util_1.ensureIntNumber)(chainId);\n    }\n    async _eth_requestAccounts() {\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: \"provider::_eth_requestAccounts\",\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay\n                ? Session_1.Session.hash(this._relay.session.id)\n                : undefined,\n        });\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses,\n            });\n        }\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            res = await relay.requestEthereumAccounts().promise;\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        if (!(this.isLedger || this.isCoinbaseBrowser)) {\n            await this.switchEthereumChain(this.getChainId());\n        }\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const message = (0, util_1.ensureBuffer)(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumTransaction(tx).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n        const relay = await this.initializeRelay();\n        const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    /** @deprecated */\n    async _cbwallet_arbitrary(params) {\n        const action = params[0];\n        const data = params[1];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        if (typeof action !== \"object\" || action === null) {\n            throw new Error(\"parameter must be an object\");\n        }\n        const result = await this.genericRequest(action, data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    async _wallet_addEthereumChain(params) {\n        var _a, _b, _c, _d;\n        const request = params[0];\n        if (((_a = request.rpcUrls) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n            return {\n                jsonrpc: \"2.0\",\n                id: 0,\n                error: { code: 2, message: `please pass in at least 1 rpcUrl` },\n            };\n        }\n        if (!request.chainName || request.chainName.trim() === \"\") {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: 0,\n                message: \"chainName is a required field\",\n            });\n        }\n        if (!request.nativeCurrency) {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: 0,\n                message: \"nativeCurrency is a required field\",\n            });\n        }\n        const chainIdNumber = parseInt(request.chainId, 16);\n        const success = await this.addEthereumChain(chainIdNumber, (_b = request.rpcUrls) !== null && _b !== void 0 ? _b : [], (_c = request.blockExplorerUrls) !== null && _c !== void 0 ? _c : [], request.chainName, (_d = request.iconUrls) !== null && _d !== void 0 ? _d : [], request.nativeCurrency);\n        if (success) {\n            return { jsonrpc: \"2.0\", id: 0, result: null };\n        }\n        else {\n            return {\n                jsonrpc: \"2.0\",\n                id: 0,\n                error: { code: 2, message: `unable to add ethereum chain` },\n            };\n        }\n    }\n    async _wallet_switchEthereumChain(params) {\n        const request = params[0];\n        await this.switchEthereumChain(parseInt(request.chainId, 16));\n        return { jsonrpc: \"2.0\", id: 0, result: null };\n    }\n    async _wallet_watchAsset(params) {\n        const request = (Array.isArray(params) ? params[0] : params);\n        if (!request.type) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Type is required\",\n            });\n        }\n        if ((request === null || request === void 0 ? void 0 : request.type) !== \"ERC20\") {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: `Asset of type '${request.type}' is not supported`,\n            });\n        }\n        if (!(request === null || request === void 0 ? void 0 : request.options)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Options are required\",\n            });\n        }\n        if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Address is required\",\n            });\n        }\n        const chainId = this.getChainId();\n        const { address, symbol, image, decimals } = request.options;\n        const res = await this.watchAsset(request.type, address, symbol, decimals, image, chainId);\n        return { jsonrpc: \"2.0\", id: 0, result: res };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n    initializeRelay() {\n        if (this._relay) {\n            return Promise.resolve(this._relay);\n        }\n        return this._relayProvider().then(relay => {\n            relay.setAccountsCallback((accounts, isDisconnect) => this._setAddresses(accounts, isDisconnect));\n            relay.setChainCallback((chainId, jsonRpcUrl) => {\n                this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10));\n            });\n            relay.setDappDefaultChainCallback(this._chainIdFromOpts);\n            this._relay = relay;\n            return relay;\n        });\n    }\n}\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}