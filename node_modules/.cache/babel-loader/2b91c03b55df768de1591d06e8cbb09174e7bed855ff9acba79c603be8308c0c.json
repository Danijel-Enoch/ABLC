{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\nvar BufferToggleOperator = /*@__PURE__*/function () {\n  function BufferToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n  BufferToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n  return BufferToggleOperator;\n}();\nvar BufferToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferToggleSubscriber, _super);\n  function BufferToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n    _this.add(subscribeToResult(_this, openings));\n    return _this;\n  }\n  BufferToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n    for (var i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  };\n  BufferToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n    while (contexts.length > 0) {\n      var context_1 = contexts.shift();\n      context_1.subscription.unsubscribe();\n      context_1.buffer = null;\n      context_1.subscription = null;\n    }\n    this.contexts = null;\n    _super.prototype._error.call(this, err);\n  };\n  BufferToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      this.destination.next(context_2.buffer);\n      context_2.subscription.unsubscribe();\n      context_2.buffer = null;\n      context_2.subscription = null;\n    }\n    this.contexts = null;\n    _super.prototype._complete.call(this);\n  };\n  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  };\n  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.closeBuffer(innerSub.context);\n  };\n  BufferToggleSubscriber.prototype.openBuffer = function (value) {\n    try {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n  BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n    var contexts = this.contexts;\n    if (contexts && context) {\n      var buffer = context.buffer,\n        subscription = context.subscription;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  };\n  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n    var contexts = this.contexts;\n    var buffer = [];\n    var subscription = new Subscription();\n    var context = {\n      buffer: buffer,\n      subscription: subscription\n    };\n    contexts.push(context);\n    var innerSubscription = subscribeToResult(this, closingNotifier, context);\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  };\n  return BufferToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,aAAc,OAAM;AAC7B,SAASC,oBAAmB,iBAAM;AAClC,SAASC,iBAAiB,QAAM,2BAAqB;AAkDrD,SAAMC,eAAU,QACd,oBACA;OAEA,SAAOC,YAAS,0BAA6B,EAAqB;SAChE,SAAOC,4BAAgB,OAA2B;IAClD;EACH;AAED;IAEEC,oCAAsD,YAClC;WADAA,oBAAkC;IAClC;IACnB;EAED;sBACgB,UAAU,KAAI,uBAAuB,QAAU,EAAE;IAChE;EACH;EATA,OASCA;AAYD;IAA2CC,gDAAqBC;EAG9DR,wCAAY,QACA;WADZO,sBAGE,YAAM,EAAWE,QAAC,EAEnBC;IAHmB,uBAAe,CAAf,iBAAgE;IAJ5EC,qBAAuC;IAM7CA,KAAI,CAACC,QAAI;;IACV;EAES;wBACS,CAAIC,SAAS,CAACC;IAC/B,IAAMF,QAAM,OAAS,SAAO;IAC5B,OAAK,GAAKA,QAAO,OAAQ;SACvB,QAAS,CAAC,EAAEG,OAAO,KAAK;MACzBH;IACF;EAES;wBACS,CAAIC,SAAS,CAACG;IAC/B,YAAO,GAAQ,IAAC,SAAY;WAC1BJ,QAAM,OAAU,MAAQ;MACxB,aAAQ,WAAa;MACrBK,SAAO,CAACC,YAAS,CAAKC,WAAC;MACvBF,SAAO,CAACG,aAAY;MACrBH;IACD;IACA,oBAAM;IACPT;EAES;wBACS,CAAIK,SAAS,CAACQ;IAC/B,YAAO,GAAQ,IAAC,SAAY;WAC1BT,QAAM,OAAU,MAAQ;MACxB,IAAIU,SAAC,GAAWV,QAAO,QAAQ;MAC/B,gBAAQ,MAAYU,SAAC,OAAc;MACnCA,SAAO,CAACJ,YAAS,CAAKC,WAAC;MACvBG,SAAO,CAACF,aAAY;MACrBE;IACD;IACA,oBAAM;IACPd;EAED;wBACoB,WAAWe,UAAC,GAAY,UAAOC,UAAW,YAAY;IACzEA;EAED;wBAC0B,UAAU,eAAS;IAC5C;EAEO;wBACF;QACF;MACA,IAAMd,eAAe,GAAG,oBAAoB;MAC5C,IAAIe,eAAe,GAAEf;UACnBe,eAAK,EAAY;QAClB;MACF;IAAC,SACAC,GAAK;MACN;IACF;EAEO;wBACW,CAAIb,SAAS,CAACc;IAE/B,IAAIf,QAAQ,OAAI,SAAS;QACfA;MACR,IAAIQ,MAAC,UAAY,CAAKA,MAAC;QAAOF,YAAC;MAC/B,gBAAgB,YAAS;MACzBN,QAAK,OAAO,SAAY,CAACgB,OAAC;MAC1B,YAAYV,YAAY;MACzBA;IACF;EAEO;wBACW,CAAIL,SAAS,CAACgB;IAE/B,IAAMjB,QAAM,GAAe,IAAC;IAC5B,IAAMQ;IACN,IAAMF,YAAY,OAAMjB,YAAE;IAC1B,WAAS,GAAK;MAAAmB,MAAQ,EAACA;MAAAF;IAAA;IAEvBN,QAAM,aAAiB;IAEvB,IAAIkB,iBAAC,GAAiB5B,iBAAI,KAAkB,iBAAQ;QAClD,kBAAiB,qBAAS;MAC3B;WACE;MAED4B,iBAAS,WAAmBC;MAC5B,0BAAiB;MAClBb;IACF;EACH;EA9F2C,6BA8F1C","names":["tslib_1","Subscription","subscribeToResult","OuterSubscriber","bufferToggle","bufferToggleOperatorFunction","BufferToggleOperator","BufferToggleSubscriber","_super","openings","closingSelector","_this","contexts","prototype","_next","i","_error","context_1","subscription","unsubscribe","buffer","_complete","context_2","notifyNext","outerValue","closingNotifier","err","closeBuffer","indexOf","trySubscribe","innerSubscription","context"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/operators/bufferToggle.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction, SubscribableOrPromise } from '../types';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, EMPTY } from 'rxjs';\n * import { bufferToggle } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : EMPTY\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift()!;\n      context.subscription.unsubscribe();\n      context.buffer = null!;\n      context.subscription = null!;\n    }\n    this.contexts = null!;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift()!;\n      this.destination.next!(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null!;\n      context.subscription = null!;\n    }\n    this.contexts = null!;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next!(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (innerSubscription as any).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}