{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport fetch from \"cross-fetch\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { formatJsonRpcError, isHttpUrl, parseConnectionError } from \"@walletconnect/jsonrpc-utils\";\nconst DEFAULT_HTTP_HEADERS = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n};\nconst DEFAULT_HTTP_METHOD = \"POST\";\nconst DEFAULT_FETCH_OPTS = {\n  headers: DEFAULT_HTTP_HEADERS,\n  method: DEFAULT_HTTP_METHOD\n};\nconst EVENT_EMITTER_MAX_LISTENERS_DEFAULT = 10;\nexport class HttpConnection {\n  constructor(url) {\n    this.url = url;\n    this.events = new EventEmitter();\n    this.isAvailable = false;\n    this.registering = false;\n    if (!isHttpUrl(url)) {\n      throw new Error(`Provided URL is not compatible with HTTP connection: ${url}`);\n    }\n    this.url = url;\n  }\n  get connected() {\n    return this.isAvailable;\n  }\n  get connecting() {\n    return this.registering;\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  async open() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.url;\n    await this.register(url);\n  }\n  async close() {\n    if (!this.isAvailable) {\n      throw new Error(\"Connection already closed\");\n    }\n    this.onClose();\n  }\n  async send(payload, context) {\n    if (!this.isAvailable) {\n      await this.register();\n    }\n    try {\n      const body = safeJsonStringify(payload);\n      const res = await fetch(this.url, Object.assign(Object.assign({}, DEFAULT_FETCH_OPTS), {\n        body\n      }));\n      const data = await res.json();\n      this.onPayload({\n        data\n      });\n    } catch (e) {\n      this.onError(payload.id, e);\n    }\n  }\n  async register() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.url;\n    if (!isHttpUrl(url)) {\n      throw new Error(`Provided URL is not compatible with HTTP connection: ${url}`);\n    }\n    if (this.registering) {\n      const currentMaxListeners = this.events.getMaxListeners();\n      if (this.events.listenerCount(\"register_error\") >= currentMaxListeners || this.events.listenerCount(\"open\") >= currentMaxListeners) {\n        this.events.setMaxListeners(currentMaxListeners + 1);\n      }\n      return new Promise((resolve, reject) => {\n        this.events.once(\"register_error\", error => {\n          this.resetMaxListeners();\n          reject(error);\n        });\n        this.events.once(\"open\", () => {\n          this.resetMaxListeners();\n          if (typeof this.isAvailable === \"undefined\") {\n            return reject(new Error(\"HTTP connection is missing or invalid\"));\n          }\n          resolve();\n        });\n      });\n    }\n    this.url = url;\n    this.registering = true;\n    try {\n      const body = safeJsonStringify({\n        id: 1,\n        jsonrpc: \"2.0\",\n        method: \"test\",\n        params: []\n      });\n      await fetch(url, Object.assign(Object.assign({}, DEFAULT_FETCH_OPTS), {\n        body\n      }));\n      this.onOpen();\n    } catch (e) {\n      const error = this.parseError(e);\n      this.events.emit(\"register_error\", error);\n      this.onClose();\n      throw error;\n    }\n  }\n  onOpen() {\n    this.isAvailable = true;\n    this.registering = false;\n    this.events.emit(\"open\");\n  }\n  onClose() {\n    this.isAvailable = false;\n    this.registering = false;\n    this.events.emit(\"close\");\n  }\n  onPayload(e) {\n    if (typeof e.data === \"undefined\") return;\n    const payload = typeof e.data === \"string\" ? safeJsonParse(e.data) : e.data;\n    this.events.emit(\"payload\", payload);\n  }\n  onError(id, e) {\n    const error = this.parseError(e);\n    const message = error.message || error.toString();\n    const payload = formatJsonRpcError(id, message);\n    this.events.emit(\"payload\", payload);\n  }\n  parseError(e) {\n    let url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.url;\n    return parseConnectionError(e, url, \"HTTP\");\n  }\n  resetMaxListeners() {\n    if (this.events.getMaxListeners() > EVENT_EMITTER_MAX_LISTENERS_DEFAULT) {\n      this.events.setMaxListeners(EVENT_EMITTER_MAX_LISTENERS_DEFAULT);\n    }\n  }\n}\nexport default HttpConnection;","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAQ,QAAQ;AACrC,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,aAAa,EAAEC,iBAAiB,QAAQ,0BAA0B;AAC3E,SACEC,kBAAkB,EAGlBC,SAAS,EACTC,oBAAoB,QACf,8BAA8B;AAErC,MAAMC,oBAAoB,GAAG;EAC3BC,MAAM,EAAE,kBAAkB;EAC1B,cAAc,EAAE;CACjB;AAED,MAAMC,mBAAmB,GAAG,MAAM;AAElC,MAAMC,kBAAkB,GAAG;EACzBC,OAAO,EAAEJ,oBAAoB;EAC7BK,MAAM,EAAEH;CACT;AAGD,MAAMI,mCAAmC,GAAG,EAAE;AAE9C,OAAM,MAAOC,cAAc;EAOzBC,YAAmBC,GAAW;IAAX,QAAG,GAAHA,GAAG;IANf,WAAM,GAAG,IAAIhB,YAAY,EAAE;IAE1B,gBAAW,GAAG,KAAK;IAEnB,gBAAW,GAAG,KAAK;IAGzB,IAAI,CAACK,SAAS,CAACW,GAAG,CAAC,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAC,wDAAwDD,GAAG,EAAE,CAAC;;IAEhF,IAAI,CAACA,GAAG,GAAGA,GAAG;EAChB;EAEA,IAAIE,SAAS;IACX,OAAO,IAAI,CAACC,WAAW;EACzB;EAEA,IAAIC,UAAU;IACZ,OAAO,IAAI,CAACC,WAAW;EACzB;EAEOC,EAAE,CAACC,KAAa,EAAEC,QAAa;IACpC,IAAI,CAACC,MAAM,CAACH,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC;EACjC;EAEOE,IAAI,CAACH,KAAa,EAAEC,QAAa;IACtC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACH,KAAK,EAAEC,QAAQ,CAAC;EACnC;EAEOG,GAAG,CAACJ,KAAa,EAAEC,QAAa;IACrC,IAAI,CAACC,MAAM,CAACE,GAAG,CAACJ,KAAK,EAAEC,QAAQ,CAAC;EAClC;EAEOI,cAAc,CAACL,KAAa,EAAEC,QAAa;IAChD,IAAI,CAACC,MAAM,CAACG,cAAc,CAACL,KAAK,EAAEC,QAAQ,CAAC;EAC7C;EAEO,MAAMK,IAAI,GAAuB;IAAA,IAAtBb,0EAAc,IAAI,CAACA,GAAG;IACtC,MAAM,IAAI,CAACc,QAAQ,CAACd,GAAG,CAAC;EAC1B;EAEO,MAAMe,KAAK;IAChB,IAAI,CAAC,IAAI,CAACZ,WAAW,EAAE;MACrB,MAAM,IAAIF,KAAK,CAAC,2BAA2B,CAAC;;IAE9C,IAAI,CAACe,OAAO,EAAE;EAChB;EAEO,MAAMC,IAAI,CAACC,OAAuB,EAAEC,OAAa;IACtD,IAAI,CAAC,IAAI,CAAChB,WAAW,EAAE;MACrB,MAAM,IAAI,CAACW,QAAQ,EAAE;;IAEvB,IAAI;MACF,MAAMM,IAAI,GAAGjC,iBAAiB,CAAC+B,OAAO,CAAC;MACvC,MAAMG,GAAG,GAAG,MAAMpC,KAAK,CAAC,IAAI,CAACe,GAAG,kCAAON,kBAAkB;QAAE0B;MAAI,GAAG;MAClE,MAAME,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAI,EAAE;MAC7B,IAAI,CAACC,SAAS,CAAC;QAAEF;MAAI,CAAE,CAAC;KACzB,CAAC,OAAOG,CAAC,EAAE;MACV,IAAI,CAACC,OAAO,CAACR,OAAO,CAACS,EAAE,EAAEF,CAAC,CAAC;;EAE/B;EAIQ,MAAMX,QAAQ,GAAe;IAAA,IAAdd,GAAG,uEAAG,IAAI,CAACA,GAAG;IACnC,IAAI,CAACX,SAAS,CAACW,GAAG,CAAC,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAC,wDAAwDD,GAAG,EAAE,CAAC;;IAEhF,IAAI,IAAI,CAACK,WAAW,EAAE;MACpB,MAAMuB,mBAAmB,GAAG,IAAI,CAACnB,MAAM,CAACoB,eAAe,EAAE;MACzD,IACE,IAAI,CAACpB,MAAM,CAACqB,aAAa,CAAC,gBAAgB,CAAC,IAAIF,mBAAmB,IAClE,IAAI,CAACnB,MAAM,CAACqB,aAAa,CAAC,MAAM,CAAC,IAAIF,mBAAmB,EACxD;QACA,IAAI,CAACnB,MAAM,CAACsB,eAAe,CAACH,mBAAmB,GAAG,CAAC,CAAC;;MAEtD,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;QACrC,IAAI,CAACzB,MAAM,CAACC,IAAI,CAAC,gBAAgB,EAAEyB,KAAK,IAAG;UACzC,IAAI,CAACC,iBAAiB,EAAE;UACxBF,MAAM,CAACC,KAAK,CAAC;QACf,CAAC,CAAC;QACF,IAAI,CAAC1B,MAAM,CAACC,IAAI,CAAC,MAAM,EAAE,MAAK;UAC5B,IAAI,CAAC0B,iBAAiB,EAAE;UACxB,IAAI,OAAO,IAAI,CAACjC,WAAW,KAAK,WAAW,EAAE;YAC3C,OAAO+B,MAAM,CAAC,IAAIjC,KAAK,CAAC,uCAAuC,CAAC,CAAC;;UAEnEgC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;;IAEJ,IAAI,CAACjC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACK,WAAW,GAAG,IAAI;IACvB,IAAI;MACF,MAAMe,IAAI,GAAGjC,iBAAiB,CAAC;QAAEwC,EAAE,EAAE,CAAC;QAAEU,OAAO,EAAE,KAAK;QAAEzC,MAAM,EAAE,MAAM;QAAE0C,MAAM,EAAE;MAAE,CAAE,CAAC;MACrF,MAAMrD,KAAK,CAACe,GAAG,kCAAON,kBAAkB;QAAE0B;MAAI,GAAG;MACjD,IAAI,CAACmB,MAAM,EAAE;KACd,CAAC,OAAOd,CAAC,EAAE;MACV,MAAMU,KAAK,GAAG,IAAI,CAACK,UAAU,CAACf,CAAC,CAAC;MAChC,IAAI,CAAChB,MAAM,CAACgC,IAAI,CAAC,gBAAgB,EAAEN,KAAK,CAAC;MACzC,IAAI,CAACnB,OAAO,EAAE;MACd,MAAMmB,KAAK;;EAEf;EAEQI,MAAM;IACZ,IAAI,CAACpC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACE,WAAW,GAAG,KAAK;IACxB,IAAI,CAACI,MAAM,CAACgC,IAAI,CAAC,MAAM,CAAC;EAC1B;EAEQzB,OAAO;IACb,IAAI,CAACb,WAAW,GAAG,KAAK;IACxB,IAAI,CAACE,WAAW,GAAG,KAAK;IACxB,IAAI,CAACI,MAAM,CAACgC,IAAI,CAAC,OAAO,CAAC;EAC3B;EAEQjB,SAAS,CAACC,CAAgB;IAChC,IAAI,OAAOA,CAAC,CAACH,IAAI,KAAK,WAAW,EAAE;IACnC,MAAMJ,OAAO,GAAmB,OAAOO,CAAC,CAACH,IAAI,KAAK,QAAQ,GAAGpC,aAAa,CAACuC,CAAC,CAACH,IAAI,CAAC,GAAGG,CAAC,CAACH,IAAI;IAC3F,IAAI,CAACb,MAAM,CAACgC,IAAI,CAAC,SAAS,EAAEvB,OAAO,CAAC;EACtC;EAEQQ,OAAO,CAACC,EAAU,EAAEF,CAAQ;IAClC,MAAMU,KAAK,GAAG,IAAI,CAACK,UAAU,CAACf,CAAC,CAAC;IAChC,MAAMiB,OAAO,GAAGP,KAAK,CAACO,OAAO,IAAIP,KAAK,CAACQ,QAAQ,EAAE;IACjD,MAAMzB,OAAO,GAAG9B,kBAAkB,CAACuC,EAAE,EAAEe,OAAO,CAAC;IAC/C,IAAI,CAACjC,MAAM,CAACgC,IAAI,CAAC,SAAS,EAAEvB,OAAO,CAAC;EACtC;EAEQsB,UAAU,CAACf,CAAQ,EAAgB;IAAA,IAAdzB,GAAG,uEAAG,IAAI,CAACA,GAAG;IACzC,OAAOV,oBAAoB,CAACmC,CAAC,EAAEzB,GAAG,EAAE,MAAM,CAAC;EAC7C;EAEQoC,iBAAiB;IACvB,IAAI,IAAI,CAAC3B,MAAM,CAACoB,eAAe,EAAE,GAAGhC,mCAAmC,EAAE;MACvE,IAAI,CAACY,MAAM,CAACsB,eAAe,CAAClC,mCAAmC,CAAC;;EAEpE;;AAGF,eAAeC,cAAc","names":["EventEmitter","fetch","safeJsonParse","safeJsonStringify","formatJsonRpcError","isHttpUrl","parseConnectionError","DEFAULT_HTTP_HEADERS","Accept","DEFAULT_HTTP_METHOD","DEFAULT_FETCH_OPTS","headers","method","EVENT_EMITTER_MAX_LISTENERS_DEFAULT","HttpConnection","constructor","url","Error","connected","isAvailable","connecting","registering","on","event","listener","events","once","off","removeListener","open","register","close","onClose","send","payload","context","body","res","data","json","onPayload","e","onError","id","currentMaxListeners","getMaxListeners","listenerCount","setMaxListeners","Promise","resolve","reject","error","resetMaxListeners","jsonrpc","params","onOpen","parseError","emit","message","toString"],"sources":["../../src/http.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}