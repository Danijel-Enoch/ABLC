{"ast":null,"code":"/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n  while (observer) {\n    var _a = observer,\n      closed_1 = _a.closed,\n      destination = _a.destination,\n      isStopped = _a.isStopped;\n    if (closed_1 || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}","map":{"version":3,"mappings":"AAAA;AASA,SAAMA,UAAU,uBAAuD;OACrE,SAAOC,cAAU;SACTC;IACN,IAAIC,aAAU;MAAAC,QAAW;MAAAC;MAAAC;QACvBF,QAAO,IAAKE,SAAC;MACd;WACC,eAAW,eAAY;MACxBJ;WACC;MACDA;IACF;EACD;EACD","names":["Subscriber","canReportError","observer","_a","closed_1","destination","isStopped"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/util/canReportError.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}