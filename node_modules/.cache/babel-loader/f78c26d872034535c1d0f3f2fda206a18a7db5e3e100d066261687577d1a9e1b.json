{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function buffer(closingNotifier) {\n  return function bufferOperatorFunction(source) {\n    return source.lift(new BufferOperator(closingNotifier));\n  };\n}\nvar BufferOperator = /*@__PURE__*/function () {\n  function BufferOperator(closingNotifier) {\n    this.closingNotifier = closingNotifier;\n  }\n  BufferOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  };\n  return BufferOperator;\n}();\nvar BufferSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferSubscriber, _super);\n  function BufferSubscriber(destination, closingNotifier) {\n    var _this = _super.call(this, destination) || this;\n    _this.buffer = [];\n    _this.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(_this)));\n    return _this;\n  }\n  BufferSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n  BufferSubscriber.prototype.notifyNext = function () {\n    var buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  };\n  return BufferSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAIA,OAAO,KAAEA,oBAAuB;AA0ChC,SAAMC,qBAAoB,gBAAgC;OACxD,SAAOC,MAAS;SACd,SAAOC,sBAAgB,OAAkB;IACzC;EACH;AAED;IAEEC,8BAAoB,YAAgC;WAAhCA,eAAeC,eAAf;IACnB;EAED;gBACS,UAAO,KAAU,GAAI,oBAAiB,QAAU,EAAE;IAC1D;EACH;EARA,OAQCD;AAOD;IAAkCE,0CAA6BC;EAG7DP,kCAAY,QAA8B;WAA1CM,gBACE,YAAM,iBAAY,EAEnB;IALO,YAAMC,MAAW;IAIvBC,KAAI,CAACN,MAAI;;IACV;EAES;kBACI,UAAU,CAACO,KAAC;IACzB;EAED;kBACc,CAAGC,SAAK,WAAO;IAC3B,IAAIR,MAAC,GAAM,IAAM;IACjB,IAAI,CAACA,WAAW;IACjB;EACH;EAjBkC,uBAiBjC","names":["tslib_1","SimpleOuterSubscriber","buffer","bufferOperatorFunction","BufferOperator","closingNotifier","BufferSubscriber","_super","_this","_next","prototype"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/operators/buffer.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { buffer } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends SimpleOuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next!(buffer);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}