{"ast":null,"code":"import { darkTheme } from \"./chunk-FRF2GUPO.js\";\nimport { midnightTheme } from \"./chunk-O2CXI27D.js\";\nimport { ConnectButton, DesktopOptions, MobileOptions, RainbowKitAuthenticationProvider, RainbowKitProvider, createAuthenticationAdapter, cssObjectFromTheme, cssStringFromTheme, dialogContent, dialogContentMobile, isAndroid, isHexString, isIOS, isMobile, useAccountModal, useChainId, useChainModal, useConnectModal, useTransactionStore } from \"./chunk-GEBDUYT7.js\";\nimport { lightTheme } from \"./chunk-ATKR4544.js\";\nimport \"./chunk-4QPBWJI3.js\";\n\n// src/wallets/connectorsForWallets.ts\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\n\n// src/utils/omitUndefinedValues.ts\nfunction omitUndefinedValues(obj) {\n  return Object.fromEntries(Object.entries(obj).filter(_ref => {\n    let [_key, value] = _ref;\n    return value !== void 0;\n  }));\n}\n\n// src/wallets/connectorsForWallets.ts\nvar connectorsForWallets = walletList => {\n  return () => {\n    let index = -1;\n    const connectors = [];\n    const visibleWallets = [];\n    const potentiallyHiddenWallets = [];\n    const walletInstances = [];\n    walletList.forEach((_ref2, groupIndex) => {\n      let {\n        groupName,\n        wallets\n      } = _ref2;\n      wallets.forEach(wallet => {\n        index++;\n        if ((wallet == null ? void 0 : wallet.iconAccent) && !isHexString(wallet == null ? void 0 : wallet.iconAccent)) {\n          throw new Error(`Property \\`iconAccent\\` is not a hex value for wallet: ${wallet.name}`);\n        }\n        const walletListItem = {\n          ...wallet,\n          groupIndex,\n          groupName,\n          index\n        };\n        if (typeof wallet.hidden === \"function\") {\n          potentiallyHiddenWallets.push(walletListItem);\n        } else {\n          visibleWallets.push(walletListItem);\n        }\n      });\n    });\n    const walletListItems = [...visibleWallets, ...potentiallyHiddenWallets];\n    walletListItems.forEach(_ref3 => {\n      let {\n        createConnector: createConnector2,\n        groupIndex,\n        groupName,\n        hidden,\n        index: index2,\n        ...walletMeta\n      } = _ref3;\n      if (typeof hidden === \"function\") {\n        const isHidden = hidden({\n          wallets: [...walletInstances.map(_ref4 => {\n            let {\n              connector: connector2,\n              id,\n              installed\n            } = _ref4;\n            return {\n              connector: connector2,\n              id,\n              installed\n            };\n          })]\n        });\n        if (isHidden) {\n          return;\n        }\n      }\n      const {\n        connector,\n        ...connectionMethods\n      } = omitUndefinedValues(createConnector2());\n      let walletConnectModalConnector;\n      if (walletMeta.id === \"walletConnect\" && connectionMethods.qrCode && !isMobile()) {\n        const {\n          chains,\n          options\n        } = connector;\n        walletConnectModalConnector = new WalletConnectConnector({\n          chains,\n          options: {\n            ...options,\n            qrcode: true\n          }\n        });\n        connectors.push(walletConnectModalConnector);\n      }\n      const walletInstance = {\n        connector,\n        groupIndex,\n        groupName,\n        index: index2,\n        walletConnectModalConnector,\n        ...walletMeta,\n        ...connectionMethods\n      };\n      walletInstances.push(walletInstance);\n      if (!connectors.includes(connector)) {\n        connectors.push(connector);\n        connector._wallets = [];\n      }\n      connector._wallets.push(walletInstance);\n    });\n    return connectors;\n  };\n};\n\n// src/wallets/walletConnectors/braveWallet/braveWallet.ts\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nvar braveWallet = _ref5 => {\n  let {\n    chains,\n    shimDisconnect\n  } = _ref5;\n  var _a;\n  return {\n    id: \"brave\",\n    name: \"Brave Wallet\",\n    iconUrl: async () => (await import(\"./braveWallet-VWIUQB2U.js\")).default,\n    iconBackground: \"#fff\",\n    installed: typeof window !== \"undefined\" && ((_a = window.ethereum) == null ? void 0 : _a.isBraveWallet) === true,\n    downloadUrls: {},\n    createConnector: () => ({\n      connector: new InjectedConnector({\n        chains,\n        options: {\n          shimDisconnect\n        }\n      })\n    })\n  };\n};\n\n// src/wallets/walletConnectors/coinbaseWallet/coinbaseWallet.ts\nimport { CoinbaseWalletConnector } from \"wagmi/connectors/coinbaseWallet\";\nvar coinbaseWallet = _ref6 => {\n  let {\n    appName,\n    chains\n  } = _ref6;\n  var _a;\n  const isCoinbaseWalletInjected = typeof window !== \"undefined\" && ((_a = window.ethereum) == null ? void 0 : _a.isCoinbaseWallet) === true;\n  return {\n    id: \"coinbase\",\n    name: \"Coinbase Wallet\",\n    shortName: \"Coinbase\",\n    iconUrl: async () => (await import(\"./coinbaseWallet-VVDQG4AO.js\")).default,\n    iconAccent: \"#2c5ff6\",\n    iconBackground: \"#2c5ff6\",\n    installed: isCoinbaseWalletInjected || void 0,\n    downloadUrls: {\n      browserExtension: \"https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad\",\n      android: \"https://play.google.com/store/apps/details?id=org.toshi\",\n      ios: \"https://apps.apple.com/us/app/coinbase-wallet-store-crypto/id1278383455\",\n      qrCode: \"https://coinbase-wallet.onelink.me/q5Sx/fdb9b250\"\n    },\n    createConnector: () => {\n      const ios = isIOS();\n      const connector = new CoinbaseWalletConnector({\n        chains,\n        options: {\n          appName,\n          headlessMode: true\n        }\n      });\n      const getUri = async () => (await connector.getProvider()).qrUrl;\n      return {\n        connector,\n        ...(ios ? {} : {\n          qrCode: {\n            getUri,\n            instructions: {\n              learnMoreUrl: \"https://www.coinbase.com/learn/tips-and-tutorials/how-to-set-up-a-crypto-wallet\",\n              steps: [{\n                description: \"We recommend putting Coinbase Wallet on your home screen for quicker access.\",\n                step: \"install\",\n                title: \"Open the Coinbase Wallet app\"\n              }, {\n                description: \"You can easily backup your wallet using the cloud backup feature.\",\n                step: \"create\",\n                title: \"Create or Import a Wallet\"\n              }, {\n                description: \"After you scan, a connection prompt will appear for you to connect your wallet.\",\n                step: \"scan\",\n                title: \"Tap the scan button\"\n              }]\n            }\n          },\n          extension: {\n            instructions: {\n              steps: [{\n                description: \"We recommend pinning Coinbase Wallet to your taskbar for quicker access to your wallet.\",\n                step: \"install\",\n                title: \"Install the Coinbase Wallet extension\"\n              }, {\n                description: \"Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.\",\n                step: \"create\",\n                title: \"Create or Import a Wallet\"\n              }, {\n                description: \"Once you set up your wallet, click below to refresh the browser and load up the extension.\",\n                step: \"refresh\",\n                title: \"Refresh your browser\"\n              }]\n            }\n          }\n        })\n      };\n    }\n  };\n};\n\n// src/wallets/walletConnectors/injectedWallet/injectedWallet.ts\nimport { InjectedConnector as InjectedConnector2 } from \"wagmi/connectors/injected\";\nvar injectedWallet = _ref7 => {\n  let {\n    chains,\n    shimDisconnect\n  } = _ref7;\n  return {\n    id: \"injected\",\n    name: \"Injected Wallet\",\n    iconUrl: async () => (await import(\"./injectedWallet-FYEFRY76.js\")).default,\n    iconBackground: \"#fff\",\n    hidden: _ref8 => {\n      let {\n        wallets\n      } = _ref8;\n      return wallets.some(wallet => wallet.installed && (wallet.connector instanceof InjectedConnector2 || wallet.id === \"coinbase\"));\n    },\n    createConnector: () => ({\n      connector: new InjectedConnector2({\n        chains,\n        options: {\n          shimDisconnect\n        }\n      })\n    })\n  };\n};\n\n// src/wallets/walletConnectors/metaMaskWallet/metaMaskWallet.ts\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\n\n// src/wallets/getWalletConnectConnector.ts\nimport { WalletConnectConnector as WalletConnectConnector2 } from \"wagmi/connectors/walletConnect\";\nvar sharedConnectors = /* @__PURE__ */new Map();\nfunction createConnector(options) {\n  const connector = new WalletConnectConnector2(options);\n  sharedConnectors.set(JSON.stringify(options), connector);\n  return connector;\n}\nfunction getWalletConnectConnector(_ref9) {\n  let {\n    chains,\n    qrcode = false\n  } = _ref9;\n  const options = {\n    chains,\n    options: {\n      qrcode\n    }\n  };\n  const serializedOptions = JSON.stringify(options);\n  const sharedConnector = sharedConnectors.get(serializedOptions);\n  return sharedConnector != null ? sharedConnector : createConnector(options);\n}\n\n// src/wallets/walletConnectors/metaMaskWallet/metaMaskWallet.ts\nfunction isMetaMask(ethereum) {\n  const isMetaMask2 = Boolean(ethereum.isMetaMask);\n  if (!isMetaMask2) {\n    return false;\n  }\n  if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state) {\n    return false;\n  }\n  if (ethereum.isTokenPocket) {\n    return false;\n  }\n  if (ethereum.isTokenary) {\n    return false;\n  }\n  return true;\n}\nvar metaMaskWallet = _ref10 => {\n  let {\n    chains,\n    shimDisconnect\n  } = _ref10;\n  const isMetaMaskInjected = typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\" && isMetaMask(window.ethereum);\n  const shouldUseWalletConnect = !isMetaMaskInjected;\n  return {\n    id: \"metaMask\",\n    name: \"MetaMask\",\n    iconUrl: async () => (await import(\"./metaMaskWallet-F3BDZH5W.js\")).default,\n    iconAccent: \"#f6851a\",\n    iconBackground: \"#fff\",\n    installed: !shouldUseWalletConnect ? isMetaMaskInjected : void 0,\n    downloadUrls: {\n      browserExtension: \"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\",\n      android: \"https://play.google.com/store/apps/details?id=io.metamask\",\n      ios: \"https://apps.apple.com/us/app/metamask/id1438144202\",\n      qrCode: \"https://metamask.io/download/\"\n    },\n    createConnector: () => {\n      const connector = shouldUseWalletConnect ? getWalletConnectConnector({\n        chains\n      }) : new MetaMaskConnector({\n        chains,\n        options: {\n          shimDisconnect\n        }\n      });\n      const getUri = async () => {\n        const {\n          uri\n        } = (await connector.getProvider()).connector;\n        return isAndroid() ? uri : `https://metamask.app.link/wc?uri=${encodeURIComponent(uri)}`;\n      };\n      return {\n        connector,\n        mobile: {\n          getUri: shouldUseWalletConnect ? getUri : void 0\n        },\n        qrCode: shouldUseWalletConnect ? {\n          getUri,\n          instructions: {\n            learnMoreUrl: \"https://metamask.io/faqs/\",\n            steps: [{\n              description: \"We recommend putting MetaMask on your home screen for quicker access.\",\n              step: \"install\",\n              title: \"Open the MetaMask app\"\n            }, {\n              description: \"Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.\",\n              step: \"create\",\n              title: \"Create or Import a Wallet\"\n            }, {\n              description: \"After you scan, a connection prompt will appear for you to connect your wallet.\",\n              step: \"scan\",\n              title: \"Tap the scan button\"\n            }]\n          }\n        } : void 0,\n        extension: {\n          learnMoreUrl: \"https://metamask.io/faqs/\",\n          instructions: {\n            steps: [{\n              description: \"We recommend pinning MetaMask to your taskbar for quicker access to your wallet.\",\n              step: \"install\",\n              title: \"Install the MetaMask extension\"\n            }, {\n              description: \"Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.\",\n              step: \"create\",\n              title: \"Create or Import a Wallet\"\n            }, {\n              description: \"Once you set up your wallet, click below to refresh the browser and load up the extension.\",\n              step: \"refresh\",\n              title: \"Refresh your browser\"\n            }]\n          }\n        }\n      };\n    }\n  };\n};\n\n// src/wallets/walletConnectors/rainbowWallet/rainbowWallet.ts\nimport { InjectedConnector as InjectedConnector3 } from \"wagmi/connectors/injected\";\nfunction isRainbow(ethereum) {\n  const isRainbow2 = Boolean(ethereum.isRainbow);\n  if (!isRainbow2) {\n    return false;\n  }\n  return true;\n}\nvar rainbowWallet = _ref11 => {\n  let {\n    chains,\n    shimDisconnect\n  } = _ref11;\n  const isRainbowInjected = typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\" && isRainbow(window.ethereum);\n  const shouldUseWalletConnect = !isRainbowInjected;\n  return {\n    id: \"rainbow\",\n    name: \"Rainbow\",\n    iconUrl: async () => (await import(\"./rainbowWallet-KSMGN6MJ.js\")).default,\n    iconBackground: \"#0c2f78\",\n    downloadUrls: {\n      android: \"https://play.google.com/store/apps/details?id=me.rainbow\",\n      ios: \"https://apps.apple.com/us/app/rainbow-ethereum-wallet/id1457119021\",\n      qrCode: \"https://rainbow.download\"\n    },\n    createConnector: () => {\n      const connector = shouldUseWalletConnect ? getWalletConnectConnector({\n        chains\n      }) : new InjectedConnector3({\n        chains,\n        options: {\n          shimDisconnect\n        }\n      });\n      const getUri = async () => {\n        const {\n          uri\n        } = (await connector.getProvider()).connector;\n        return isAndroid() ? uri : `https://rnbwapp.com/wc?uri=${encodeURIComponent(uri)}`;\n      };\n      return {\n        connector,\n        mobile: {\n          getUri: shouldUseWalletConnect ? getUri : void 0\n        },\n        qrCode: shouldUseWalletConnect ? {\n          getUri,\n          instructions: {\n            learnMoreUrl: \"https://learn.rainbow.me/connect-your-wallet-to-a-website-or-app\",\n            steps: [{\n              description: \"We recommend putting Rainbow on your home screen for faster access to your wallet.\",\n              step: \"install\",\n              title: \"Open the Rainbow app\"\n            }, {\n              description: \"You can easily backup your wallet using our backup feature on your phone.\",\n              step: \"create\",\n              title: \"Create or Import a Wallet\"\n            }, {\n              description: \"After you scan, a connection prompt will appear for you to connect your wallet.\",\n              step: \"scan\",\n              title: \"Tap the scan button\"\n            }]\n          }\n        } : void 0\n      };\n    }\n  };\n};\n\n// src/wallets/walletConnectors/walletConnectWallet/walletConnectWallet.ts\nvar walletConnectWallet = _ref12 => {\n  let {\n    chains\n  } = _ref12;\n  return {\n    id: \"walletConnect\",\n    name: \"WalletConnect\",\n    iconUrl: async () => (await import(\"./walletConnectWallet-GTSESN7Q.js\")).default,\n    iconBackground: \"#3b99fc\",\n    createConnector: () => {\n      const ios = isIOS();\n      const connector = getWalletConnectConnector({\n        chains,\n        qrcode: ios\n      });\n      const getUri = async () => (await connector.getProvider()).connector.uri;\n      return {\n        connector,\n        ...(ios ? {} : {\n          mobile: {\n            getUri\n          },\n          qrCode: {\n            getUri\n          }\n        })\n      };\n    }\n  };\n};\n\n// src/wallets/getDefaultWallets.ts\nvar getDefaultWallets = _ref13 => {\n  let {\n    appName,\n    chains\n  } = _ref13;\n  const wallets = [{\n    groupName: \"Popular\",\n    wallets: [injectedWallet({\n      chains\n    }), rainbowWallet({\n      chains\n    }), coinbaseWallet({\n      appName,\n      chains\n    }), metaMaskWallet({\n      chains\n    }), walletConnectWallet({\n      chains\n    }), braveWallet({\n      chains\n    })]\n  }];\n  return {\n    connectors: connectorsForWallets(wallets),\n    wallets\n  };\n};\n\n// src/transactions/useAddRecentTransaction.ts\nimport { useCallback } from \"react\";\nimport { useAccount } from \"wagmi\";\nfunction useAddRecentTransaction() {\n  const store = useTransactionStore();\n  const {\n    address\n  } = useAccount();\n  const chainId = useChainId();\n  return useCallback(transaction => {\n    if (!address || !chainId) {\n      throw new Error(\"No address or chain ID found\");\n    }\n    store.addTransaction(address, chainId, transaction);\n  }, [store, address, chainId]);\n}\n\n// src/__private__/index.ts\nvar __private__ = {\n  DesktopOptions,\n  dialogContent,\n  dialogContentMobile,\n  MobileOptions\n};\nexport { ConnectButton, RainbowKitAuthenticationProvider, RainbowKitProvider, __private__, connectorsForWallets, createAuthenticationAdapter, cssObjectFromTheme, cssStringFromTheme, darkTheme, getDefaultWallets, getWalletConnectConnector, lightTheme, midnightTheme, useAccountModal, useAddRecentTransaction, useChainModal, useConnectModal };","map":{"version":3,"names":["darkTheme","midnightTheme","ConnectButton","DesktopOptions","MobileOptions","RainbowKitAuthenticationProvider","RainbowKitProvider","createAuthenticationAdapter","cssObjectFromTheme","cssStringFromTheme","dialogContent","dialogContentMobile","isAndroid","isHexString","isIOS","isMobile","useAccountModal","useChainId","useChainModal","useConnectModal","useTransactionStore","lightTheme","WalletConnectConnector","omitUndefinedValues","obj","Object","fromEntries","entries","filter","_key","value","connectorsForWallets","walletList","index","connectors","visibleWallets","potentiallyHiddenWallets","walletInstances","forEach","groupIndex","groupName","wallets","wallet","iconAccent","Error","name","walletListItem","hidden","push","walletListItems","createConnector","createConnector2","index2","walletMeta","isHidden","map","connector","connector2","id","installed","connectionMethods","walletConnectModalConnector","qrCode","chains","options","qrcode","walletInstance","includes","_wallets","InjectedConnector","braveWallet","shimDisconnect","_a","iconUrl","default","iconBackground","window","ethereum","isBraveWallet","downloadUrls","CoinbaseWalletConnector","coinbaseWallet","appName","isCoinbaseWalletInjected","isCoinbaseWallet","shortName","browserExtension","android","ios","headlessMode","getUri","getProvider","qrUrl","instructions","learnMoreUrl","steps","description","step","title","extension","InjectedConnector2","injectedWallet","some","MetaMaskConnector","WalletConnectConnector2","sharedConnectors","Map","set","JSON","stringify","getWalletConnectConnector","serializedOptions","sharedConnector","get","isMetaMask","isMetaMask2","Boolean","_events","_state","isTokenPocket","isTokenary","metaMaskWallet","isMetaMaskInjected","shouldUseWalletConnect","uri","encodeURIComponent","mobile","InjectedConnector3","isRainbow","isRainbow2","rainbowWallet","isRainbowInjected","walletConnectWallet","getDefaultWallets","useCallback","useAccount","useAddRecentTransaction","store","address","chainId","transaction","addTransaction","__private__"],"sources":["/Users/air/Downloads/ABLC/node_modules/@rainbow-me/rainbowkit/dist/index.js"],"sourcesContent":["import {\n  darkTheme\n} from \"./chunk-FRF2GUPO.js\";\nimport {\n  midnightTheme\n} from \"./chunk-O2CXI27D.js\";\nimport {\n  ConnectButton,\n  DesktopOptions,\n  MobileOptions,\n  RainbowKitAuthenticationProvider,\n  RainbowKitProvider,\n  createAuthenticationAdapter,\n  cssObjectFromTheme,\n  cssStringFromTheme,\n  dialogContent,\n  dialogContentMobile,\n  isAndroid,\n  isHexString,\n  isIOS,\n  isMobile,\n  useAccountModal,\n  useChainId,\n  useChainModal,\n  useConnectModal,\n  useTransactionStore\n} from \"./chunk-GEBDUYT7.js\";\nimport {\n  lightTheme\n} from \"./chunk-ATKR4544.js\";\nimport \"./chunk-4QPBWJI3.js\";\n\n// src/wallets/connectorsForWallets.ts\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\n\n// src/utils/omitUndefinedValues.ts\nfunction omitUndefinedValues(obj) {\n  return Object.fromEntries(Object.entries(obj).filter(([_key, value]) => value !== void 0));\n}\n\n// src/wallets/connectorsForWallets.ts\nvar connectorsForWallets = (walletList) => {\n  return () => {\n    let index = -1;\n    const connectors = [];\n    const visibleWallets = [];\n    const potentiallyHiddenWallets = [];\n    const walletInstances = [];\n    walletList.forEach(({ groupName, wallets }, groupIndex) => {\n      wallets.forEach((wallet) => {\n        index++;\n        if ((wallet == null ? void 0 : wallet.iconAccent) && !isHexString(wallet == null ? void 0 : wallet.iconAccent)) {\n          throw new Error(`Property \\`iconAccent\\` is not a hex value for wallet: ${wallet.name}`);\n        }\n        const walletListItem = {\n          ...wallet,\n          groupIndex,\n          groupName,\n          index\n        };\n        if (typeof wallet.hidden === \"function\") {\n          potentiallyHiddenWallets.push(walletListItem);\n        } else {\n          visibleWallets.push(walletListItem);\n        }\n      });\n    });\n    const walletListItems = [\n      ...visibleWallets,\n      ...potentiallyHiddenWallets\n    ];\n    walletListItems.forEach(({\n      createConnector: createConnector2,\n      groupIndex,\n      groupName,\n      hidden,\n      index: index2,\n      ...walletMeta\n    }) => {\n      if (typeof hidden === \"function\") {\n        const isHidden = hidden({\n          wallets: [\n            ...walletInstances.map(({ connector: connector2, id, installed }) => ({\n              connector: connector2,\n              id,\n              installed\n            }))\n          ]\n        });\n        if (isHidden) {\n          return;\n        }\n      }\n      const { connector, ...connectionMethods } = omitUndefinedValues(createConnector2());\n      let walletConnectModalConnector;\n      if (walletMeta.id === \"walletConnect\" && connectionMethods.qrCode && !isMobile()) {\n        const { chains, options } = connector;\n        walletConnectModalConnector = new WalletConnectConnector({\n          chains,\n          options: {\n            ...options,\n            qrcode: true\n          }\n        });\n        connectors.push(walletConnectModalConnector);\n      }\n      const walletInstance = {\n        connector,\n        groupIndex,\n        groupName,\n        index: index2,\n        walletConnectModalConnector,\n        ...walletMeta,\n        ...connectionMethods\n      };\n      walletInstances.push(walletInstance);\n      if (!connectors.includes(connector)) {\n        connectors.push(connector);\n        connector._wallets = [];\n      }\n      connector._wallets.push(walletInstance);\n    });\n    return connectors;\n  };\n};\n\n// src/wallets/walletConnectors/braveWallet/braveWallet.ts\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nvar braveWallet = ({\n  chains,\n  shimDisconnect\n}) => {\n  var _a;\n  return {\n    id: \"brave\",\n    name: \"Brave Wallet\",\n    iconUrl: async () => (await import(\"./braveWallet-VWIUQB2U.js\")).default,\n    iconBackground: \"#fff\",\n    installed: typeof window !== \"undefined\" && ((_a = window.ethereum) == null ? void 0 : _a.isBraveWallet) === true,\n    downloadUrls: {},\n    createConnector: () => ({\n      connector: new InjectedConnector({\n        chains,\n        options: { shimDisconnect }\n      })\n    })\n  };\n};\n\n// src/wallets/walletConnectors/coinbaseWallet/coinbaseWallet.ts\nimport { CoinbaseWalletConnector } from \"wagmi/connectors/coinbaseWallet\";\nvar coinbaseWallet = ({\n  appName,\n  chains\n}) => {\n  var _a;\n  const isCoinbaseWalletInjected = typeof window !== \"undefined\" && ((_a = window.ethereum) == null ? void 0 : _a.isCoinbaseWallet) === true;\n  return {\n    id: \"coinbase\",\n    name: \"Coinbase Wallet\",\n    shortName: \"Coinbase\",\n    iconUrl: async () => (await import(\"./coinbaseWallet-VVDQG4AO.js\")).default,\n    iconAccent: \"#2c5ff6\",\n    iconBackground: \"#2c5ff6\",\n    installed: isCoinbaseWalletInjected || void 0,\n    downloadUrls: {\n      browserExtension: \"https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad\",\n      android: \"https://play.google.com/store/apps/details?id=org.toshi\",\n      ios: \"https://apps.apple.com/us/app/coinbase-wallet-store-crypto/id1278383455\",\n      qrCode: \"https://coinbase-wallet.onelink.me/q5Sx/fdb9b250\"\n    },\n    createConnector: () => {\n      const ios = isIOS();\n      const connector = new CoinbaseWalletConnector({\n        chains,\n        options: {\n          appName,\n          headlessMode: true\n        }\n      });\n      const getUri = async () => (await connector.getProvider()).qrUrl;\n      return {\n        connector,\n        ...ios ? {} : {\n          qrCode: {\n            getUri,\n            instructions: {\n              learnMoreUrl: \"https://www.coinbase.com/learn/tips-and-tutorials/how-to-set-up-a-crypto-wallet\",\n              steps: [\n                {\n                  description: \"We recommend putting Coinbase Wallet on your home screen for quicker access.\",\n                  step: \"install\",\n                  title: \"Open the Coinbase Wallet app\"\n                },\n                {\n                  description: \"You can easily backup your wallet using the cloud backup feature.\",\n                  step: \"create\",\n                  title: \"Create or Import a Wallet\"\n                },\n                {\n                  description: \"After you scan, a connection prompt will appear for you to connect your wallet.\",\n                  step: \"scan\",\n                  title: \"Tap the scan button\"\n                }\n              ]\n            }\n          },\n          extension: {\n            instructions: {\n              steps: [\n                {\n                  description: \"We recommend pinning Coinbase Wallet to your taskbar for quicker access to your wallet.\",\n                  step: \"install\",\n                  title: \"Install the Coinbase Wallet extension\"\n                },\n                {\n                  description: \"Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.\",\n                  step: \"create\",\n                  title: \"Create or Import a Wallet\"\n                },\n                {\n                  description: \"Once you set up your wallet, click below to refresh the browser and load up the extension.\",\n                  step: \"refresh\",\n                  title: \"Refresh your browser\"\n                }\n              ]\n            }\n          }\n        }\n      };\n    }\n  };\n};\n\n// src/wallets/walletConnectors/injectedWallet/injectedWallet.ts\nimport { InjectedConnector as InjectedConnector2 } from \"wagmi/connectors/injected\";\nvar injectedWallet = ({\n  chains,\n  shimDisconnect\n}) => ({\n  id: \"injected\",\n  name: \"Injected Wallet\",\n  iconUrl: async () => (await import(\"./injectedWallet-FYEFRY76.js\")).default,\n  iconBackground: \"#fff\",\n  hidden: ({ wallets }) => wallets.some((wallet) => wallet.installed && (wallet.connector instanceof InjectedConnector2 || wallet.id === \"coinbase\")),\n  createConnector: () => ({\n    connector: new InjectedConnector2({\n      chains,\n      options: { shimDisconnect }\n    })\n  })\n});\n\n// src/wallets/walletConnectors/metaMaskWallet/metaMaskWallet.ts\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\n\n// src/wallets/getWalletConnectConnector.ts\nimport { WalletConnectConnector as WalletConnectConnector2 } from \"wagmi/connectors/walletConnect\";\nvar sharedConnectors = /* @__PURE__ */ new Map();\nfunction createConnector(options) {\n  const connector = new WalletConnectConnector2(options);\n  sharedConnectors.set(JSON.stringify(options), connector);\n  return connector;\n}\nfunction getWalletConnectConnector({\n  chains,\n  qrcode = false\n}) {\n  const options = {\n    chains,\n    options: {\n      qrcode\n    }\n  };\n  const serializedOptions = JSON.stringify(options);\n  const sharedConnector = sharedConnectors.get(serializedOptions);\n  return sharedConnector != null ? sharedConnector : createConnector(options);\n}\n\n// src/wallets/walletConnectors/metaMaskWallet/metaMaskWallet.ts\nfunction isMetaMask(ethereum) {\n  const isMetaMask2 = Boolean(ethereum.isMetaMask);\n  if (!isMetaMask2) {\n    return false;\n  }\n  if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state) {\n    return false;\n  }\n  if (ethereum.isTokenPocket) {\n    return false;\n  }\n  if (ethereum.isTokenary) {\n    return false;\n  }\n  return true;\n}\nvar metaMaskWallet = ({\n  chains,\n  shimDisconnect\n}) => {\n  const isMetaMaskInjected = typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\" && isMetaMask(window.ethereum);\n  const shouldUseWalletConnect = !isMetaMaskInjected;\n  return {\n    id: \"metaMask\",\n    name: \"MetaMask\",\n    iconUrl: async () => (await import(\"./metaMaskWallet-F3BDZH5W.js\")).default,\n    iconAccent: \"#f6851a\",\n    iconBackground: \"#fff\",\n    installed: !shouldUseWalletConnect ? isMetaMaskInjected : void 0,\n    downloadUrls: {\n      browserExtension: \"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\",\n      android: \"https://play.google.com/store/apps/details?id=io.metamask\",\n      ios: \"https://apps.apple.com/us/app/metamask/id1438144202\",\n      qrCode: \"https://metamask.io/download/\"\n    },\n    createConnector: () => {\n      const connector = shouldUseWalletConnect ? getWalletConnectConnector({ chains }) : new MetaMaskConnector({\n        chains,\n        options: { shimDisconnect }\n      });\n      const getUri = async () => {\n        const { uri } = (await connector.getProvider()).connector;\n        return isAndroid() ? uri : `https://metamask.app.link/wc?uri=${encodeURIComponent(uri)}`;\n      };\n      return {\n        connector,\n        mobile: {\n          getUri: shouldUseWalletConnect ? getUri : void 0\n        },\n        qrCode: shouldUseWalletConnect ? {\n          getUri,\n          instructions: {\n            learnMoreUrl: \"https://metamask.io/faqs/\",\n            steps: [\n              {\n                description: \"We recommend putting MetaMask on your home screen for quicker access.\",\n                step: \"install\",\n                title: \"Open the MetaMask app\"\n              },\n              {\n                description: \"Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.\",\n                step: \"create\",\n                title: \"Create or Import a Wallet\"\n              },\n              {\n                description: \"After you scan, a connection prompt will appear for you to connect your wallet.\",\n                step: \"scan\",\n                title: \"Tap the scan button\"\n              }\n            ]\n          }\n        } : void 0,\n        extension: {\n          learnMoreUrl: \"https://metamask.io/faqs/\",\n          instructions: {\n            steps: [\n              {\n                description: \"We recommend pinning MetaMask to your taskbar for quicker access to your wallet.\",\n                step: \"install\",\n                title: \"Install the MetaMask extension\"\n              },\n              {\n                description: \"Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.\",\n                step: \"create\",\n                title: \"Create or Import a Wallet\"\n              },\n              {\n                description: \"Once you set up your wallet, click below to refresh the browser and load up the extension.\",\n                step: \"refresh\",\n                title: \"Refresh your browser\"\n              }\n            ]\n          }\n        }\n      };\n    }\n  };\n};\n\n// src/wallets/walletConnectors/rainbowWallet/rainbowWallet.ts\nimport { InjectedConnector as InjectedConnector3 } from \"wagmi/connectors/injected\";\nfunction isRainbow(ethereum) {\n  const isRainbow2 = Boolean(ethereum.isRainbow);\n  if (!isRainbow2) {\n    return false;\n  }\n  return true;\n}\nvar rainbowWallet = ({\n  chains,\n  shimDisconnect\n}) => {\n  const isRainbowInjected = typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\" && isRainbow(window.ethereum);\n  const shouldUseWalletConnect = !isRainbowInjected;\n  return {\n    id: \"rainbow\",\n    name: \"Rainbow\",\n    iconUrl: async () => (await import(\"./rainbowWallet-KSMGN6MJ.js\")).default,\n    iconBackground: \"#0c2f78\",\n    downloadUrls: {\n      android: \"https://play.google.com/store/apps/details?id=me.rainbow\",\n      ios: \"https://apps.apple.com/us/app/rainbow-ethereum-wallet/id1457119021\",\n      qrCode: \"https://rainbow.download\"\n    },\n    createConnector: () => {\n      const connector = shouldUseWalletConnect ? getWalletConnectConnector({ chains }) : new InjectedConnector3({\n        chains,\n        options: { shimDisconnect }\n      });\n      const getUri = async () => {\n        const { uri } = (await connector.getProvider()).connector;\n        return isAndroid() ? uri : `https://rnbwapp.com/wc?uri=${encodeURIComponent(uri)}`;\n      };\n      return {\n        connector,\n        mobile: { getUri: shouldUseWalletConnect ? getUri : void 0 },\n        qrCode: shouldUseWalletConnect ? {\n          getUri,\n          instructions: {\n            learnMoreUrl: \"https://learn.rainbow.me/connect-your-wallet-to-a-website-or-app\",\n            steps: [\n              {\n                description: \"We recommend putting Rainbow on your home screen for faster access to your wallet.\",\n                step: \"install\",\n                title: \"Open the Rainbow app\"\n              },\n              {\n                description: \"You can easily backup your wallet using our backup feature on your phone.\",\n                step: \"create\",\n                title: \"Create or Import a Wallet\"\n              },\n              {\n                description: \"After you scan, a connection prompt will appear for you to connect your wallet.\",\n                step: \"scan\",\n                title: \"Tap the scan button\"\n              }\n            ]\n          }\n        } : void 0\n      };\n    }\n  };\n};\n\n// src/wallets/walletConnectors/walletConnectWallet/walletConnectWallet.ts\nvar walletConnectWallet = ({\n  chains\n}) => ({\n  id: \"walletConnect\",\n  name: \"WalletConnect\",\n  iconUrl: async () => (await import(\"./walletConnectWallet-GTSESN7Q.js\")).default,\n  iconBackground: \"#3b99fc\",\n  createConnector: () => {\n    const ios = isIOS();\n    const connector = getWalletConnectConnector({\n      chains,\n      qrcode: ios\n    });\n    const getUri = async () => (await connector.getProvider()).connector.uri;\n    return {\n      connector,\n      ...ios ? {} : {\n        mobile: { getUri },\n        qrCode: { getUri }\n      }\n    };\n  }\n});\n\n// src/wallets/getDefaultWallets.ts\nvar getDefaultWallets = ({\n  appName,\n  chains\n}) => {\n  const wallets = [\n    {\n      groupName: \"Popular\",\n      wallets: [\n        injectedWallet({ chains }),\n        rainbowWallet({ chains }),\n        coinbaseWallet({ appName, chains }),\n        metaMaskWallet({ chains }),\n        walletConnectWallet({ chains }),\n        braveWallet({ chains })\n      ]\n    }\n  ];\n  return {\n    connectors: connectorsForWallets(wallets),\n    wallets\n  };\n};\n\n// src/transactions/useAddRecentTransaction.ts\nimport { useCallback } from \"react\";\nimport { useAccount } from \"wagmi\";\nfunction useAddRecentTransaction() {\n  const store = useTransactionStore();\n  const { address } = useAccount();\n  const chainId = useChainId();\n  return useCallback((transaction) => {\n    if (!address || !chainId) {\n      throw new Error(\"No address or chain ID found\");\n    }\n    store.addTransaction(address, chainId, transaction);\n  }, [store, address, chainId]);\n}\n\n// src/__private__/index.ts\nvar __private__ = {\n  DesktopOptions,\n  dialogContent,\n  dialogContentMobile,\n  MobileOptions\n};\nexport {\n  ConnectButton,\n  RainbowKitAuthenticationProvider,\n  RainbowKitProvider,\n  __private__,\n  connectorsForWallets,\n  createAuthenticationAdapter,\n  cssObjectFromTheme,\n  cssStringFromTheme,\n  darkTheme,\n  getDefaultWallets,\n  getWalletConnectConnector,\n  lightTheme,\n  midnightTheme,\n  useAccountModal,\n  useAddRecentTransaction,\n  useChainModal,\n  useConnectModal\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}