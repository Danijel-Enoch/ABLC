{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n  return function (source) {\n    return source.lift(new EveryOperator(predicate, thisArg, source));\n  };\n}\nvar EveryOperator = /*@__PURE__*/function () {\n  function EveryOperator(predicate, thisArg, source) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.source = source;\n  }\n  EveryOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  };\n  return EveryOperator;\n}();\nvar EverySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(EverySubscriber, _super);\n  function EverySubscriber(destination, predicate, thisArg, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.predicate = predicate;\n    _this.thisArg = thisArg;\n    _this.source = source;\n    _this.index = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n  EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  };\n  EverySubscriber.prototype._next = function (value) {\n    var result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  };\n  EverySubscriber.prototype._complete = function () {\n    this.notifyComplete(true);\n  };\n  return EverySubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAwB3B,SAAMC,UAAU,QAAS,eACa;OACpC,SAAOC,KAAC,UAA0B;EACnC;IAAA;EAAA;AAED;IACEC,6BAAoB,YAEA;WAFAA,uBAAsE;IACtE,cAAO,GAAPC,SAAa;IACb,YAAM,GAANC,OAAsB;IACzC;EAED;eACS,UAAO,KAAU,aAAIC,QAAgB,QAAQ,EAAE;IACvD;EACH;EATA,OASCH;AAOD;IAAiCI,yCAAaC;EAG5CR,iCAAY,QACQ;WADpBO,eAIE,YAAM,WAAY,SAEnB;IALmB,4BAAsE;IACtEE,eAAO,GAAPL,SAAY;IACZK,aAAM,GAANJ,OAAsB;IALlCI,YAAK,GAAYC,MAAC;IAOxBD,KAAI,CAACE,QAAO;;IACb;EAEO;iBACD,UAAgB,CAACC,iBAAiB;IACvC,IAAI,CAACC,WAAW,CAACC,oBAAW;IAC7B;EAES;iBACE,UAAS;IACnB,IAAIC;QACF;MACDA;IAAC,SACAC,GAAK;MACL,gBAAO;MACR;IAED;QACE,OAAK;MACN;IACF;EAES;iBACH,UAAe,UAAM;IAC3B;EACH;EAjCiC,sBAiChC","names":["tslib_1","Subscriber","every","EveryOperator","predicate","thisArg","observer","EverySubscriber","_super","_this","source","index","notifyComplete","destination","next","result","err"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/operators/every.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * ## Example\n * A simple example emitting true if all elements are less than 5, false otherwise\n * ```ts\n * import { of } from 'rxjs';\n * import { every } from 'rxjs/operators';\n *\n *  of(1, 2, 3, 4, 5, 6).pipe(\n *     every(x => x < 5),\n * )\n * .subscribe(x => console.log(x)); // -> false\n * ```\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}