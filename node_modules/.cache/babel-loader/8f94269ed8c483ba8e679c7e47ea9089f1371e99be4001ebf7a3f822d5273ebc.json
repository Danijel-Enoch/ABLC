{"ast":null,"code":"/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return nextOrObserver;\n    }\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n  return new Subscriber(nextOrObserver, error, complete);\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,kBAAgB;AACzB,SAASC,YAAS,sBAAqB,gCAAc;AAGrD,SAAMC,SAAUC,aACd,qBAEA;OAEA,SAAIC,YAAgB;MAClBC,cAAI;QACFA,cAAwB,YAAgBL;MACzC;IAED;QACEK,cAAO,mBAAe;MACvB;IACF;EAED;MACE,eAAW,UAAW,aAAe;IACtC;EAED;EACD","names":["Subscriber","rxSubscriber","empty","emptyObserver","toSubscriber","nextOrObserver"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/util/toSubscriber.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}