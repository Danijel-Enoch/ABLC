{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator;\n    sub.add(function () {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        var value;\n        var done;\n        try {\n          var result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,kBAAc,eAAM;AAC7B,SAASC,YAAY,yBAAuB;AAE5C,SAAMC,QAAU,mBAAoB,QAAoB,oBAAwB;OAC9E,SAAYC;MACV,MAAM;IACP;EACD;SACE,IAASH,UAAO,WAAcI,UAAC;IAC/B,IAAIC,UAAsBJ;IAC1B,IAAIC,QAAI;QAENI,IAAI,YAAY;UACdJ,QAAQ,IAAC,OAASA;QACnBA;MACA;IACH;QACEI,aAAW,SAAM,aAAkB;MACnCJ,QAAQ,SAASK,eAAU;UACzBD,IAAIE,UAAUC,QAAO,CAAE;YACrBL,UAAO;UACR;QACD;QACA,IAAIM,KAAc;QAClB,IAAIC;YACF;UACA,UAAQ,WAAa;UACrBD,KAAI,GAAGE,MAAO,MAAK;UACpBD;QAAC,SACAE;UACAT,UAAO;UACR;QACD;YACEO;UACDP;eACC;UACAA,UAAK,KAAU,CAACM;UACjB;QACC;MACF;IACJ;IACC;EACJ","names":["Observable","Subscription","iterator","scheduleIterable","subscriber","sub","add","Symbol_iterator","scheduler","schedule","value","done","result","err"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let iterator: Iterator<T>;\n    sub.add(() => {\n      // Finalize generators\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(() => {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        let value: T;\n        let done: boolean;\n        try {\n          const result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}