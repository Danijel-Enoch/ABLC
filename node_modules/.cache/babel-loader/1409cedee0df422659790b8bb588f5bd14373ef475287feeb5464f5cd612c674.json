{"ast":null,"code":"import { Connector, __privateAdd, __privateGet, __privateMethod, __privateSet, __publicField } from \"./chunk-5NCTPR6C.js\";\n\n// src/walletConnect.ts\nimport { SwitchChainError, UserRejectedRequestError, getClient, normalizeChainId } from \"@wagmi/core\";\nimport { providers } from \"ethers\";\nimport { getAddress, hexValue } from \"ethers/lib/utils.js\";\nvar switchChainAllowedRegex = /(imtoken|metamask|rainbow|trust wallet)/i;\nvar _provider, _switchChain, switchChain_fn;\nvar WalletConnectConnector = class extends Connector {\n  constructor(config) {\n    super(config);\n    __privateAdd(this, _switchChain);\n    __publicField(this, \"id\", \"walletConnect\");\n    __publicField(this, \"name\", \"WalletConnect\");\n    __publicField(this, \"ready\", true);\n    __privateAdd(this, _provider, void 0);\n    __publicField(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) this.emit(\"disconnect\");else this.emit(\"change\", {\n        account: getAddress(accounts[0])\n      });\n    });\n    __publicField(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    __publicField(this, \"onDisconnect\", () => {\n      this.emit(\"disconnect\");\n    });\n  }\n  async connect() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainId;\n      if (!targetChainId) {\n        const lastUsedChainId = getClient().lastUsedChainId;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) targetChainId = lastUsedChainId;\n      }\n      const provider = await this.getProvider({\n        chainId: targetChainId,\n        create: true\n      });\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n      setTimeout(() => this.emit(\"message\", {\n        type: \"connecting\"\n      }), 0);\n      const accounts = await provider.enable();\n      const account = getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      const walletName = provider.connector?.peerMeta?.name ?? \"\";\n      if (switchChainAllowedRegex.test(walletName)) this.switchChain = __privateMethod(this, _switchChain, switchChain_fn);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user closed modal/i.test(error.message)) throw new UserRejectedRequestError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    await provider.disconnect();\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    typeof localStorage !== \"undefined\" && localStorage.removeItem(\"walletconnect\");\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    const accounts = provider.accounts;\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    const chainId = normalizeChainId(provider.chainId);\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId,\n      create\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!__privateGet(this, _provider) || chainId || create) {\n      const rpc = !this.options?.infuraId ? this.chains.reduce((rpc2, chain) => ({\n        ...rpc2,\n        [chain.id]: chain.rpcUrls.default.http[0]\n      }), {}) : {};\n      const WalletConnectProvider = (await import(\"@walletconnect/ethereum-provider\")).default;\n      __privateSet(this, _provider, new WalletConnectProvider({\n        ...this.options,\n        chainId,\n        rpc: {\n          ...rpc,\n          ...this.options?.rpc\n        }\n      }));\n    }\n    return __privateGet(this, _provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n};\n_provider = new WeakMap();\n_switchChain = new WeakSet();\nswitchChain_fn = async function (chainId) {\n  const provider = await this.getProvider();\n  const id = hexValue(chainId);\n  try {\n    await Promise.race([provider.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{\n        chainId: id\n      }]\n    }), new Promise(res => this.on(\"change\", _ref => {\n      let {\n        chain\n      } = _ref;\n      if (chain?.id === chainId) res(chainId);\n    }))]);\n    return this.chains.find(x => x.id === chainId) ?? {\n      id: chainId,\n      name: `Chain ${id}`,\n      network: `${id}`,\n      nativeCurrency: {\n        name: \"Ether\",\n        decimals: 18,\n        symbol: \"ETH\"\n      },\n      rpcUrls: {\n        default: {\n          http: [\"\"]\n        }\n      }\n    };\n  } catch (error) {\n    const message = typeof error === \"string\" ? error : error?.message;\n    if (/user rejected request/i.test(message)) throw new UserRejectedRequestError(error);\n    throw new SwitchChainError(error);\n  }\n};\nexport { WalletConnectConnector };","map":{"version":3,"names":["Connector","__privateAdd","__privateGet","__privateMethod","__privateSet","__publicField","SwitchChainError","UserRejectedRequestError","getClient","normalizeChainId","providers","getAddress","hexValue","switchChainAllowedRegex","_provider","_switchChain","switchChain_fn","WalletConnectConnector","constructor","config","accounts","length","emit","account","chainId","id","unsupported","isChainUnsupported","chain","connect","targetChainId","lastUsedChainId","provider","getProvider","create","on","onAccountsChanged","onChainChanged","onDisconnect","setTimeout","type","enable","getChainId","walletName","connector","peerMeta","name","test","switchChain","Web3Provider","error","message","disconnect","removeListener","localStorage","removeItem","getAccount","rpc","options","infuraId","chains","reduce","rpc2","rpcUrls","default","http","WalletConnectProvider","getSigner","Promise","all","isAuthorized","WeakMap","WeakSet","race","request","method","params","res","find","x","network","nativeCurrency","decimals","symbol"],"sources":["/Users/air/Downloads/ABLC/node_modules/@wagmi/connectors/dist/walletConnect.js"],"sourcesContent":["import {\n  Connector,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet,\n  __publicField\n} from \"./chunk-5NCTPR6C.js\";\n\n// src/walletConnect.ts\nimport {\n  SwitchChainError,\n  UserRejectedRequestError,\n  getClient,\n  normalizeChainId\n} from \"@wagmi/core\";\nimport { providers } from \"ethers\";\nimport { getAddress, hexValue } from \"ethers/lib/utils.js\";\nvar switchChainAllowedRegex = /(imtoken|metamask|rainbow|trust wallet)/i;\nvar _provider, _switchChain, switchChain_fn;\nvar WalletConnectConnector = class extends Connector {\n  constructor(config) {\n    super(config);\n    __privateAdd(this, _switchChain);\n    __publicField(this, \"id\", \"walletConnect\");\n    __publicField(this, \"name\", \"WalletConnect\");\n    __publicField(this, \"ready\", true);\n    __privateAdd(this, _provider, void 0);\n    __publicField(this, \"onAccountsChanged\", (accounts) => {\n      if (accounts.length === 0)\n        this.emit(\"disconnect\");\n      else\n        this.emit(\"change\", { account: getAddress(accounts[0]) });\n    });\n    __publicField(this, \"onChainChanged\", (chainId) => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", { chain: { id, unsupported } });\n    });\n    __publicField(this, \"onDisconnect\", () => {\n      this.emit(\"disconnect\");\n    });\n  }\n  async connect({ chainId } = {}) {\n    try {\n      let targetChainId = chainId;\n      if (!targetChainId) {\n        const lastUsedChainId = getClient().lastUsedChainId;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId))\n          targetChainId = lastUsedChainId;\n      }\n      const provider = await this.getProvider({\n        chainId: targetChainId,\n        create: true\n      });\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n      setTimeout(() => this.emit(\"message\", { type: \"connecting\" }), 0);\n      const accounts = await provider.enable();\n      const account = getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      const walletName = provider.connector?.peerMeta?.name ?? \"\";\n      if (switchChainAllowedRegex.test(walletName))\n        this.switchChain = __privateMethod(this, _switchChain, switchChain_fn);\n      return {\n        account,\n        chain: { id, unsupported },\n        provider: new providers.Web3Provider(\n          provider\n        )\n      };\n    } catch (error) {\n      if (/user closed modal/i.test(error.message))\n        throw new UserRejectedRequestError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    await provider.disconnect();\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    typeof localStorage !== \"undefined\" && localStorage.removeItem(\"walletconnect\");\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    const accounts = provider.accounts;\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    const chainId = normalizeChainId(provider.chainId);\n    return chainId;\n  }\n  async getProvider({\n    chainId,\n    create\n  } = {}) {\n    if (!__privateGet(this, _provider) || chainId || create) {\n      const rpc = !this.options?.infuraId ? this.chains.reduce(\n        (rpc2, chain) => ({\n          ...rpc2,\n          [chain.id]: chain.rpcUrls.default.http[0]\n        }),\n        {}\n      ) : {};\n      const WalletConnectProvider = (await import(\"@walletconnect/ethereum-provider\")).default;\n      __privateSet(this, _provider, new WalletConnectProvider({\n        ...this.options,\n        chainId,\n        rpc: { ...rpc, ...this.options?.rpc }\n      }));\n    }\n    return __privateGet(this, _provider);\n  }\n  async getSigner({ chainId } = {}) {\n    const [provider, account] = await Promise.all([\n      this.getProvider({ chainId }),\n      this.getAccount()\n    ]);\n    return new providers.Web3Provider(\n      provider,\n      chainId\n    ).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n};\n_provider = new WeakMap();\n_switchChain = new WeakSet();\nswitchChain_fn = async function(chainId) {\n  const provider = await this.getProvider();\n  const id = hexValue(chainId);\n  try {\n    await Promise.race([\n      provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: id }]\n      }),\n      new Promise(\n        (res) => this.on(\"change\", ({ chain }) => {\n          if (chain?.id === chainId)\n            res(chainId);\n        })\n      )\n    ]);\n    return this.chains.find((x) => x.id === chainId) ?? {\n      id: chainId,\n      name: `Chain ${id}`,\n      network: `${id}`,\n      nativeCurrency: { name: \"Ether\", decimals: 18, symbol: \"ETH\" },\n      rpcUrls: { default: { http: [\"\"] } }\n    };\n  } catch (error) {\n    const message = typeof error === \"string\" ? error : error?.message;\n    if (/user rejected request/i.test(message))\n      throw new UserRejectedRequestError(error);\n    throw new SwitchChainError(error);\n  }\n};\nexport {\n  WalletConnectConnector\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}