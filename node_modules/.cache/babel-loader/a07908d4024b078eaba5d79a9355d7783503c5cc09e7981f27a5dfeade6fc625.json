{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\nvar SubscribeOnObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SubscribeOnObservable, _super);\n  function SubscribeOnObservable(source, delayTime, scheduler) {\n    if (delayTime === void 0) {\n      delayTime = 0;\n    }\n    if (scheduler === void 0) {\n      scheduler = asap;\n    }\n    var _this = _super.call(this) || this;\n    _this.source = source;\n    _this.delayTime = delayTime;\n    _this.scheduler = scheduler;\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      _this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      _this.scheduler = asap;\n    }\n    return _this;\n  }\n  SubscribeOnObservable.create = function (source, delay, scheduler) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (scheduler === void 0) {\n      scheduler = asap;\n    }\n    return new SubscribeOnObservable(source, delay, scheduler);\n  };\n  SubscribeOnObservable.dispatch = function (arg) {\n    var source = arg.source,\n      subscriber = arg.subscriber;\n    return this.add(source.subscribe(subscriber));\n  };\n  SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n    var delay = this.delayTime;\n    var source = this.source;\n    var scheduler = this.scheduler;\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source: source,\n      subscriber: subscriber\n    });\n  };\n  return SubscribeOnObservable;\n}(Observable);\nexport { SubscribeOnObservable };","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAC3B,SAASC,UAAM,QAAM,eAAoB;AACzC,SAASC,YAAW,mBAAM;AAY1B;IAA8CC,+CAAaC;EAYzDJ,uCACoB,SAAqB;WAArBG,uCAAqB;IACrB;MAFpBE,SAGE;IAHiB;IACC;MACAC,YAASJ,IAAT;IAElB;QACEK,KAAI,GAACH,OAASI,IAAI,CAAC;SACpB;IACDD,KAAK,UAAS,GAAIF,SAAO;SACvB,UAAK,YAAiB;QACvB;;IACF;IApBM,yBAAMC,SAAb,SAAsC,KAAE,UAAmB;MAAnBC;IAAmB;IACzD,OAAOA,KAAI;EACb;EAGOJ,+BAAQ,UAAfM,MAAgE;IACtD;MACRC,KAAO,GAAK;IACb;IAeD;MACQJ,SAAQ,GAAIJ,IAAC;IACnB;IACA,OAAM,yBAA2B;;uBAGzB,SAAE,aAAUS;QACjBF;MAAAG;IACJ;EACH;EAlC8CT,qBAkC7C","names":["tslib_1","Observable","asap","SubscribeOnObservable","_super","delayTime","scheduler","_this","call","source","delay","arg","subscriber"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/observable/SubscribeOnObservable.ts"],"sourcesContent":["import { SchedulerLike, SchedulerAction } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  /** @nocollapse */\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: SchedulerLike = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  /** @nocollapse */\n  static dispatch<T>(this: SchedulerAction<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: SchedulerLike = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}