{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AsapScheduler = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsapScheduler, _super);\n  function AsapScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AsapScheduler.prototype.flush = function (action) {\n    this.active = true;\n    this.scheduled = undefined;\n    var actions = this.actions;\n    var error;\n    var index = -1;\n    var count = actions.length;\n    action = action || actions.shift();\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n    this.active = false;\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  };\n  return AsapScheduler;\n}(AsyncScheduler);\nexport { AsapScheduler };","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,aAAgB,OAAM;AAE/B;IAAmCC,uCAAcC;EAAjDF;;IA2BC;EA1BQ;eAEA,UAAc;IACnB,IAAI,CAACG,SAAS,IAAG;IAEV,0BAAO;IACd,IAAIC,OAAW;IACf,IAAIC,KAAK;IACT,IAAIC,KAAK,GAAW;IACpB,SAAS,UAAU,OAAO;IAE1BC,MAAG;;UAECF,QAAME;QACP;MACF;IAED,SAAK,EAAMD,KAAG,GAAKE,KAAC;IAEpB,IAAI,OAAO;QACTH,OAAO;aACL,OAAO,QAAW,KAAGE;QACtBA;MACD;MACD;IACF;EACH;EA3BmC,oBA2BlC","names":["tslib_1","AsapScheduler","_super","active","actions","error","index","action","count"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}