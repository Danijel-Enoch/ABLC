{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function window(windowBoundaries) {\n  return function windowOperatorFunction(source) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\nvar WindowOperator = /*@__PURE__*/function () {\n  function WindowOperator(windowBoundaries) {\n    this.windowBoundaries = windowBoundaries;\n  }\n  WindowOperator.prototype.call = function (subscriber, source) {\n    var windowSubscriber = new WindowSubscriber(subscriber);\n    var sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n    }\n    return sourceSubscription;\n  };\n  return WindowOperator;\n}();\nvar WindowSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowSubscriber, _super);\n  function WindowSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n    _this.window = new Subject();\n    destination.next(_this.window);\n    return _this;\n  }\n  WindowSubscriber.prototype.notifyNext = function () {\n    this.openWindow();\n  };\n  WindowSubscriber.prototype.notifyError = function (error) {\n    this._error(error);\n  };\n  WindowSubscriber.prototype.notifyComplete = function () {\n    this._complete();\n  };\n  WindowSubscriber.prototype._next = function (value) {\n    this.window.next(value);\n  };\n  WindowSubscriber.prototype._error = function (err) {\n    this.window.error(err);\n    this.destination.error(err);\n  };\n  WindowSubscriber.prototype._complete = function () {\n    this.window.complete();\n    this.destination.complete();\n  };\n  WindowSubscriber.prototype._unsubscribe = function () {\n    this.window = null;\n  };\n  WindowSubscriber.prototype.openWindow = function () {\n    var prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    var destination = this.destination;\n    var newWindow = this.window = new Subject();\n    destination.next(newWindow);\n  };\n  return WindowSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAS,MAAM;AAGxB,SAASC,2BAAuB;AA6ChC,SAAMC,qBAAoB,gBAAiC;OACzD,SAAOC,MAAS;SACd,SAAOC,sBAAgB,OAAe;IACtC;EACH;AAED;IAEEC,8BAAoB,YAAiC;WAAjCA;IACnB;EAED;gBACQ,UAAgB,KAAG,GAAI,oBAAiB,QAAY;IAC1D,IAAMC,mBAAkB,IAAGC,gBAAiB;IAC5C,IAAIC,kBAAC,GAAmBC,MAAM,CAAEC;QAC9B,mBAAiB,CAAGC,MAAC;MACtBL;IACD;IACD;EACH;EAbA,OAaCD;AAOD;IAAkCE,0CAA6BK;EAI7DZ,kCAAY,QAAsC;WAAlDO,gBACE,YAAM;IAHA,YAAMK,MAAe,CAAIC,SAAY,EAACC;IAI5CC,YAAY,OAAKd,OAAK;;IACvB;EAED;kBACO,UAAa;IACnB;EAED;kBACc,UAAO;IACpB;EAED;kBACO,UAAY;IAClB;EAES;kBACI,UAAU,CAACe,KAAC;IACzB;EAES;kBACI,UAAU,CAACC;IACvB,IAAI,CAACd,YAAY,KAAM;IACxB;EAES;kBACI,UAAU,CAACe;IACvB,IAAI,CAACf,eAAY;IAClB;EAGD;kBACa,UAAS;IACrB;EAEO;kBACA,UAAkB,WAAO;IAC/B,IAAIgB,UAAU,GAAE;QACdA,UAAU,EAAC;MACZA;IACD;IACA,IAAML,WAAS,GAAG,IAAK,YAAa;IACpC,aAAY,GAAK,IAAC,OAAU,GAAC;IAC9BA;EACH;EAjDkC,uBAiDjC","names":["tslib_1","Subject","SimpleOuterSubscriber","window","windowOperatorFunction","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","source","subscribe","closed","_super","call","destination","_this","_next","_error","_complete","prevWindow"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/operators/window.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Operator } from '../Operator';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n * In every window of 1 second each, emit at most 2 click events\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { window, mergeAll, map, take } from 'rxjs/operators';\n *\n *  const clicks = fromEvent(document, 'click');\n *  const sec = interval(1000);\n *  const result = clicks.pipe(\n *      window(sec),\n *      map(win => win.pipe(take(2))), // each window has at most 2 emissions\n *      mergeAll(),              // flatten the Observable-of-Observables\n *  );\n *  result.subscribe(x => console.log(x));\n * ```\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends SimpleOuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any): void {\n    this._error(error);\n  }\n\n  notifyComplete(): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error!(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete!();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.window = null!;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next!(newWindow);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}