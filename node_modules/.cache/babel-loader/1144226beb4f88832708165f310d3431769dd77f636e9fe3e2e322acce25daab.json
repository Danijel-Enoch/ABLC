{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nvar Subscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(Subscriber, _super);\n  function Subscriber(destinationOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n    _this.syncErrorValue = null;\n    _this.syncErrorThrown = false;\n    _this.syncErrorThrowable = false;\n    _this.isStopped = false;\n    switch (arguments.length) {\n      case 0:\n        _this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          _this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            _this.destination = destinationOrNext;\n            destinationOrNext.add(_this);\n          } else {\n            _this.syncErrorThrowable = true;\n            _this.destination = new SafeSubscriber(_this, destinationOrNext);\n          }\n          break;\n        }\n      default:\n        _this.syncErrorThrowable = true;\n        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n        break;\n    }\n    return _this;\n  }\n  Subscriber.prototype[rxSubscriberSymbol] = function () {\n    return this;\n  };\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  };\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  };\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    _super.prototype.unsubscribe.call(this);\n  };\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _parentOrParents = this._parentOrParents;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  };\n  return Subscriber;\n}(Subscription);\nexport { Subscriber };\nvar SafeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SafeSubscriber, _super);\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n    _this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = _this;\n    if (isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          _this.add(context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = _this.unsubscribe.bind(_this);\n      }\n    }\n    _this._context = context;\n    _this._next = next;\n    _this._error = error;\n    _this._complete = complete;\n    return _this;\n  }\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  };\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  };\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  };\n  return SafeSubscriber;\n}(Subscriber);\nexport { SafeSubscriber };","map":{"version":3,"mappings":"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","names":["tslib_1","isFunction","empty","Subscription","rxSubscriber","rxSubscriberSymbol","config","Subscriber","_super","_this","arguments","destination","destinationOrNext","syncErrorThrowable","next","error","complete","subscriber","isStopped","unsubscribe","_next","value","_error","err","_complete","_parentOrParents","closed","SafeSubscriber","observerOrNext","context","emptyObserver","_context","_parentSubscriber","useDeprecatedSynchronousErrorHandling","__tryOrUnsub","__tryOrSetError","hostReportError","syncErrorValue","wrappedComplete","fn","prototype","parent","syncErrorThrown"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}