{"ast":null,"code":"/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeToObservable = function (obj) {\n  return function (subscriber) {\n    var obs = obj[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    } else {\n      return obs.subscribe(subscriber);\n    }\n  };\n};","map":{"version":3,"mappings":"AACA;AAOA,SAAOA,UAAM,qBAAwB,QAAY,sBAAM;OACrD,IAASC,qBAAO,GAAiB,UAAIC;EACrC,OAAI,UAAWC,UAAS,EAAK;IAE3B,OAAM,GAAID,qBAAU;IACrB;MAAM;IACL,OACD;MACD","names":["observable","subscribeToObservable","obj","subscriber"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/util/subscribeToObservable.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}