{"ast":null,"code":"import { ethers } from \"ethers\";\nexport const abi = ['function getAmountsOut(uint amountIn, address[] memory path) public view returns(uint[] memory amounts)', 'function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)', \"function getPair(address tokenA, address tokenB) external view returns (address pair)\", \"function allPairs(uint) external view returns (address pair)\"];\nexport const tokenAbi = ['function approve(address spender, uint256 amount) external returns (bool)'];\n\n//get RPC JSON provider\n\nconst tokens = [{\n  WBNB: \"\"\n}, {\n  ABLC: \"\"\n}, {\n  BUSD: \"\"\n}];\nconst usdt = \"0x55d398326f99059fF775485246999027B3197955\";\nexport const PancakeRouter = \"0x10ed43c718714eb63d5aa57b78b54704e256024e\";\nexport const ablc = \"0x557a09f2a257e7ea0C9EdD45F4ABc1F5Eca05dfF\";\nexport const bnb = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\nexport const busd = \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\";\nconst provider = new ethers.providers.JsonRpcProvider(\"https://bsc-dataseed1.binance.org/\");\nconst signer = provider.getSigner();\nexport const getAmountsOut = async amountAblc => {\n  console.log(\"going\");\n  const abi = [\"function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)\"];\n  let amounts = [];\n  const contract = new ethers.Contract(PancakeRouter, abi, provider);\n  await contract.functions.getAmountsOut(amountAblc, [ablc, usdt]).then(res => {\n    amounts.push(res[0][0].toString());\n    amounts.push(res[0][1].toString());\n  }).catch(err => console.log(err));\n  return amounts;\n  //  console.log(\"result\", result);\n};\n\nexport async function approve(amount, address) {\n  const abi = [\"function approve(address spender, uint256 amount) returns (bool)\"];\n  const contract = new ethers.Contract(address, abi, signer);\n  const tx = await contract.functions.approve(PancakeRouter.toString(), amount.toString());\n  const receipt = await tx.wait();\n  console.log(\"receipt\", receipt);\n}\nexport const getAmountsOutAblc = async amountAblc => {\n  console.log(amountAblc);\n  console.log(\"going\");\n  const abi = [\"function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)\"];\n  let amounts = [];\n  const contract = new ethers.Contract(PancakeRouter, abi, provider);\n  await contract.functions.getAmountsOut(amountAblc, [ablc, usdt]).then(res => {\n    amounts.push(res[0][0].toString());\n    amounts.push(res[0][1].toString());\n    console.log({\n      amounts\n    });\n  }).catch(err => console.log(err));\n  let amountsBnb = [];\n  console.log(converter(amounts[1]));\n  await contract.functions.getAmountsOut(amounts[1], [usdt, bnb]).then(res => {\n    amountsBnb.push(res[0][0].toString());\n    amountsBnb.push(res[0][1].toString());\n    console.log({\n      amountsBnb\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n  let amountsBusd = [];\n  await contract.functions.getAmountsOut(amounts[1].toString(), [usdt, busd]).then(res => {\n    amountsBusd.push(res[0][0].toString());\n    amountsBusd.push(res[0][1].toString());\n    console.log({\n      amountsBusd\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n  return {\n    amountsBusd,\n    amountsBnb\n  };\n  //  console.log(\"result\", result);\n};\n\nexport const converter = value => {\n  return (parseFloat(value) / 10000000000).toString();\n};\nexport async function SwapperMain(router, tokenA, tokenB, amountIn, amountOutMin) {\n  const abi = ['function getAmountsOut(uint amountIn, address[] memory path) public view returns(uint[] memory amounts)', 'function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)', \"function getPair(address tokenA, address tokenB) external view returns (address pair)\", \"function allPairs(uint) external view returns (address pair)\", \"function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)\"];\n\n  //const router = \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\";  ///for both mainet and testnet\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const walletAddress = await provider.getSigner().getAddress();\n  console.log({\n    walletAddress\n  });\n  async function getTokenAmountsOut(amountIn, tokenA, tokenB) {\n    const routerContract = new ethers.Contract(PancakeRouter, abi, signer);\n    const TokenAamountIn = ethers.utils.parseUnits(amountIn, 18);\n    let amounts = await routerContract.getAmountsOut(TokenAamountIn, [tokenA, tokenB]);\n    const TokenBamountOutMin = amounts[1].sub(amounts[1].div(10));\n    const amountsOut = [ethers.utils.formatEther(TokenAamountIn), ethers.utils.formatEther(TokenBamountOutMin)];\n    return amountsOut;\n  }\n  async function ApproveToken(tokenA, amountIn) {\n    const busdContract = new ethers.Contract(tokenA, tokenAbi, signer);\n    const approveTx = await busdContract.approve(PancakeRouter, amountIn);\n    let reciept = await approveTx.wait();\n    console.log(reciept);\n  }\n  async function swapToken(amountIn, amountOutMin, tokenA, tokenB) {\n    const walletAddress = await provider.getSigner().getAddress();\n    console.log({\n      PancakeRouter,\n      abi,\n      amountIn,\n      amountOutMin,\n      walletAddress,\n      tokenA,\n      tokenB\n    });\n    const routerContract = new ethers.Contract(PancakeRouter, abi, signer);\n    let receipt;\n    if (tokenB === \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\") {\n      const swapTx = await routerContract.swapExactTokensForETH(amountIn, amountOutMin, [tokenA, tokenB], walletAddress, Date.now() + 1000 * 60 * 10, {\n        gasLimit: 350000\n      });\n      receipt = await swapTx.wait();\n    } else {\n      const swapTx = await routerContract.swapExactTokensForTokens(amountIn, amountOutMin, [tokenA, tokenB], walletAddress, Date.now() + 1000 * 60 * 10, {\n        gasLimit: 350000\n      });\n      receipt = await swapTx.wait();\n    }\n    console.log(receipt);\n  }\n  async function mainSwap(amountIn, tokenA, tokenB, amountOutMin) {\n    ApproveToken(tokenA, amountIn).then(res => {\n      swapToken(amountIn, amountOutMin, tokenA, tokenB).then(res => {\n        alert(\"TX success\");\n      });\n    });\n  }\n  mainSwap(amountIn, tokenA, tokenB, amountOutMin);\n}\n\n//export const DEADLINE = currentTime + 1200;\n_c = SwapperMain;\nvar _c;\n$RefreshReg$(_c, \"SwapperMain\");","map":{"version":3,"names":["ethers","abi","tokenAbi","tokens","WBNB","ABLC","BUSD","usdt","PancakeRouter","ablc","bnb","busd","provider","providers","JsonRpcProvider","signer","getSigner","getAmountsOut","amountAblc","console","log","amounts","contract","Contract","functions","then","res","push","toString","catch","err","approve","amount","address","tx","receipt","wait","getAmountsOutAblc","amountsBnb","converter","amountsBusd","value","parseFloat","SwapperMain","router","tokenA","tokenB","amountIn","amountOutMin","Web3Provider","window","ethereum","walletAddress","getAddress","getTokenAmountsOut","routerContract","TokenAamountIn","utils","parseUnits","TokenBamountOutMin","sub","div","amountsOut","formatEther","ApproveToken","busdContract","approveTx","reciept","swapToken","swapTx","swapExactTokensForETH","Date","now","gasLimit","swapExactTokensForTokens","mainSwap","alert"],"sources":["/Users/air/Downloads/ABLC/src/sdk/swap.js"],"sourcesContent":["import { ethers } from \"ethers\";\nexport const abi = [\n    'function getAmountsOut(uint amountIn, address[] memory path) public view returns(uint[] memory amounts)',\n    'function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)',\n    \"function getPair(address tokenA, address tokenB) external view returns (address pair)\",\n    \"function allPairs(uint) external view returns (address pair)\"\n]\nexport const tokenAbi = [\n    'function approve(address spender, uint256 amount) external returns (bool)'\n]\n\n\n//get RPC JSON provider\n\nconst tokens = [\n    { WBNB: \"\" },\n    { ABLC: \"\" },\n    { BUSD: \"\" }\n]\nconst usdt = \"0x55d398326f99059fF775485246999027B3197955\";\nexport const PancakeRouter = \"0x10ed43c718714eb63d5aa57b78b54704e256024e\";\nexport const ablc = \"0x557a09f2a257e7ea0C9EdD45F4ABc1F5Eca05dfF\"\nexport const bnb = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\nexport const busd = \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\"\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://bsc-dataseed1.binance.org/\");\nconst signer = provider.getSigner()\n\nexport const getAmountsOut = async (amountAblc) => {\n    console.log(\"going\")\n    const abi = [\n        \"function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)\"\n    ];\n    let amounts = []\n    const contract = new ethers.Contract(PancakeRouter, abi, provider);\n    await contract.functions.getAmountsOut(amountAblc, [ablc, usdt]).then(res => {\n        amounts.push(res[0][0].toString())\n        amounts.push(res[0][1].toString())\n    })\n        .catch(err => console.log(err));\n\n    return amounts\n    //  console.log(\"result\", result);\n}\nexport async function approve(amount, address,) {\n    const abi = [\n        \"function approve(address spender, uint256 amount) returns (bool)\"\n    ];\n    const contract = new ethers.Contract(address, abi, signer);\n    const tx = await contract.functions.approve(PancakeRouter.toString(), amount.toString());\n\n    const receipt = await tx.wait();\n    console.log(\"receipt\", receipt);\n}\n\nexport const getAmountsOutAblc = async (amountAblc) => {\n    console.log(amountAblc)\n    console.log(\"going\")\n    const abi = [\n        \"function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)\"\n    ];\n    let amounts = []\n    const contract = new ethers.Contract(PancakeRouter, abi, provider);\n    await contract.functions.getAmountsOut(amountAblc, [ablc, usdt]).then(res => {\n        amounts.push(res[0][0].toString())\n        amounts.push(res[0][1].toString())\n        console.log({ amounts })\n    })\n        .catch(err => console.log(err));\n    let amountsBnb = []\n    console.log(converter(amounts[1]))\n    await contract.functions.getAmountsOut(amounts[1], [usdt, bnb]).then(res => {\n        amountsBnb.push(res[0][0].toString())\n        amountsBnb.push(res[0][1].toString())\n        console.log({ amountsBnb })\n    }\n    ).catch((err) => {\n        console.log(err)\n    })\n    let amountsBusd = []\n    await contract.functions.getAmountsOut(amounts[1].toString(), [usdt, busd]).then(res => {\n        amountsBusd.push(res[0][0].toString())\n        amountsBusd.push(res[0][1].toString())\n        console.log({ amountsBusd })\n    }\n    ).catch((err) => {\n        console.log(err)\n    })\n\n    return { amountsBusd, amountsBnb }\n    //  console.log(\"result\", result);\n}\n\nexport const converter = (value) => {\n    return (parseFloat(value) / 10000000000).toString()\n}\n\n\nexport async function SwapperMain(router, tokenA, tokenB, amountIn, amountOutMin) {\n    const abi = [\n        'function getAmountsOut(uint amountIn, address[] memory path) public view returns(uint[] memory amounts)',\n        'function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)',\n        \"function getPair(address tokenA, address tokenB) external view returns (address pair)\",\n        \"function allPairs(uint) external view returns (address pair)\",\n        \"function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)\"\n    ]\n\n    //const router = \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\";  ///for both mainet and testnet\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    const signer = provider.getSigner()\n    const walletAddress = await provider.getSigner().getAddress()\n    console.log({ walletAddress })\n    async function getTokenAmountsOut(amountIn, tokenA, tokenB) {\n        const routerContract = new ethers.Contract(PancakeRouter, abi, signer);\n        const TokenAamountIn = ethers.utils.parseUnits(amountIn, 18);\n        let amounts = await routerContract.getAmountsOut(TokenAamountIn, [tokenA, tokenB])\n        const TokenBamountOutMin = amounts[1].sub(amounts[1].div(10));\n        const amountsOut = [ethers.utils.formatEther(TokenAamountIn), ethers.utils.formatEther(TokenBamountOutMin)]\n        return amountsOut\n    }\n    async function ApproveToken(tokenA, amountIn) {\n        const busdContract = new ethers.Contract(tokenA, tokenAbi, signer)\n        const approveTx = await busdContract.approve(PancakeRouter, amountIn);\n        let reciept = await approveTx.wait();\n        console.log(reciept);\n    }\n\n    async function swapToken(amountIn, amountOutMin, tokenA, tokenB) {\n        const walletAddress = await provider.getSigner().getAddress()\n        console.log({ PancakeRouter, abi, amountIn, amountOutMin, walletAddress, tokenA, tokenB })\n        const routerContract = new ethers.Contract(PancakeRouter, abi, signer);\n        let receipt;\n        if (tokenB === \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\") {\n            const swapTx = await routerContract.swapExactTokensForETH(amountIn, amountOutMin, [tokenA, tokenB], walletAddress, Date.now() + 1000 * 60 * 10, { gasLimit: 350000 })\n            receipt = await swapTx.wait();\n\n        } else {\n            const swapTx = await routerContract.swapExactTokensForTokens(amountIn, amountOutMin, [tokenA, tokenB], walletAddress, Date.now() + 1000 * 60 * 10, { gasLimit: 350000 })\n            receipt = await swapTx.wait();\n        }\n\n        console.log(receipt);\n    }\n\n\n    async function mainSwap(amountIn, tokenA, tokenB, amountOutMin) {\n        ApproveToken(tokenA, amountIn).then((res) => {\n            swapToken(amountIn, amountOutMin, tokenA, tokenB).then((res) => {\n                alert(\"TX success\")\n            });\n        })\n\n    }\n\n    mainSwap(amountIn, tokenA, tokenB, amountOutMin);\n\n}\n\n//export const DEADLINE = currentTime + 1200;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}