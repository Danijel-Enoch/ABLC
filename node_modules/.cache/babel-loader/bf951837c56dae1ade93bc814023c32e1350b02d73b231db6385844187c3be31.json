{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function pairs(obj, scheduler) {\n  if (!scheduler) {\n    return new Observable(function (subscriber) {\n      var keys = Object.keys(obj);\n      for (var i = 0; i < keys.length && !subscriber.closed; i++) {\n        var key = keys[i];\n        if (obj.hasOwnProperty(key)) {\n          subscriber.next([key, obj[key]]);\n        }\n      }\n      subscriber.complete();\n    });\n  } else {\n    return new Observable(function (subscriber) {\n      var keys = Object.keys(obj);\n      var subscription = new Subscription();\n      subscription.add(scheduler.schedule(dispatch, 0, {\n        keys: keys,\n        index: 0,\n        subscriber: subscriber,\n        subscription: subscription,\n        obj: obj\n      }));\n      return subscription;\n    });\n  }\n}\nexport function dispatch(state) {\n  var keys = state.keys,\n    index = state.index,\n    subscriber = state.subscriber,\n    subscription = state.subscription,\n    obj = state.obj;\n  if (!subscriber.closed) {\n    if (index < keys.length) {\n      var key = keys[index];\n      subscriber.next([key, obj[key]]);\n      subscription.add(this.schedule({\n        keys: keys,\n        index: index + 1,\n        subscriber: subscriber,\n        subscription: subscription,\n        obj: obj\n      }));\n    } else {\n      subscriber.complete();\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;AAGA,SAASA,kBAAc,eAAM;AAkD7B,SAAMC,YAAe,QAAiB,iBAAyB;OAC7D,SAAKC,KAAW;MACd,UAAO,EAAI;WACT,IAAMF,UAAa,CAAC,UAAUG;MAC9B,QAAK,GAAKC,MAAO,KAAG,IAAK;WACvB,IAAMC,IAAG,CAAG,MAAMC,IAAE;QACpB,IAAIC,GAAG,GAACD;YACNE,kBAAiB,IAAK,GAAG;UAC1BL;QACF;MACD;MACCA;IACJ;SACC;WACE,IAAMH,UAAa,CAAC,UAAUG;MAC9B,IAAMG,aAAY,KAAG,CAAIE;MACzB,gBAAgB,GACd,gBAAkB,EACf;MACLC,YAAO,cAAa;QAAAH;QAAAI;QAAAP;QAAAM;QAAAD;MAAA;MACnB;IACJ;EACF;AAGD;OAEU,kBAAIG,KAAE;EACd,IAAIL,IAAC,QAAW;IAAMI,KAAE;IAAAP;IAAAM;IAAAD;MACtB,WAAS,CAAGI,MAAK;QACfF,KAAM,GAAGJ,IAAG,OAAK,EAAM;MACvB,UAAUA,IAAC,CAAII,KAAK;MACpBP,eAAa,CAAG,CAACI,KAAKC,QAAQ,CAAC;MAChCC;QAAAH;QAAAI;QAAAP;QAAAM;QAAAD;MAAA;WACC;MACDL;IACF;EACF","names":["Observable","Subscription","pairs","subscriber","Object","i","keys","key","obj","subscription","index","state","closed"],"sources":["/Users/air/Downloads/ABLC/node_modules/rxjs/src/internal/observable/pairs.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\n/**\n * Convert an object into an Observable of `[key, value]` pairs.\n *\n * <span class=\"informal\">Turn entries of an object into a stream.</span>\n *\n * <img src=\"./img/pairs.png\" width=\"100%\">\n *\n * `pairs` takes an arbitrary object and returns an Observable that emits arrays. Each\n * emitted array has exactly two elements - the first is a key from the object\n * and the second is a value corresponding to that key. Keys are extracted from\n * an object via `Object.keys` function, which means that they will be only\n * enumerable keys that are present on an object directly - not ones inherited\n * via prototype chain.\n *\n * By default these arrays are emitted synchronously. To change that you can\n * pass a {@link SchedulerLike} as a second argument to `pairs`.\n *\n * @example <caption>Converts a javascript object to an Observable</caption>\n * ```ts\n * import { pairs } from 'rxjs';\n *\n * const obj = {\n *   foo: 42,\n *   bar: 56,\n *   baz: 78\n * };\n *\n * pairs(obj)\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('the end!')\n * );\n *\n * // Logs:\n * // [\"foo\", 42],\n * // [\"bar\", 56],\n * // [\"baz\", 78],\n * // \"the end!\"\n * ```\n *\n * @param {Object} obj The object to inspect and turn into an\n * Observable sequence.\n * @param {Scheduler} [scheduler] An optional IScheduler to schedule\n * when resulting Observable will emit values.\n * @returns {(Observable<Array<string|T>>)} An observable sequence of\n * [key, value] pairs from the object.\n */\nexport function pairs<T>(obj: Object, scheduler?: SchedulerLike): Observable<[string, T]> {\n  if (!scheduler) {\n    return new Observable<[string, T]>(subscriber => {\n      const keys = Object.keys(obj);\n      for (let i = 0; i < keys.length && !subscriber.closed; i++) {\n        const key = keys[i];\n        if (obj.hasOwnProperty(key)) {\n          subscriber.next([key, obj[key]]);\n        }\n      }\n      subscriber.complete();\n    });\n  } else {\n    return new Observable<[string, T]>(subscriber => {\n      const keys = Object.keys(obj);\n      const subscription = new Subscription();\n      subscription.add(\n        scheduler.schedule<{ keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }>\n          (dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));\n      return subscription;\n    });\n  }\n}\n\n/** @internal */\nexport function dispatch<T>(this: SchedulerAction<any>,\n                            state: { keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }) {\n  const { keys, index, subscriber, subscription, obj } = state;\n  if (!subscriber.closed) {\n    if (index < keys.length) {\n      const key = keys[index];\n      subscriber.next([key, obj[key]]);\n      subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}